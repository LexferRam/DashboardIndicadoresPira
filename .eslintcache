[{"C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\index.js":"1","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\App.js":"2","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\serviceWorkerRegistration.js":"3","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Tabs.js":"4","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\AppBar.js":"5","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Tabs2.js":"6","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Login.js":"7","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\hocs\\PrivateRoute.js":"8","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\hocs\\UnprivateRoute.js":"9","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\Context\\AuthContext\\AuthState.js":"10","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\TabContent.js":"11","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\Context\\AuthContext\\AuthContext.js":"12","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Exportarexcel.js":"13","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridCotProdOcea.js":"14","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridCotOceaPerfil.js":"15","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridPorcTotal.js":"16","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridEmiOceaPerfil.js":"17","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridDivisEfec.js":"18","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridCotOcea.js":"19","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\Grafico.js":"20","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\GraficaCotiVsEm.js":"21","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\Graficoproductos.js":"22","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\GrafMtoFaltSobr.js":"23","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\GraficoBar.js":"24","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\Graficoprodperfil.js":"25","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Alerta.js":"26","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Tabs3.js":"27","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\hooks\\useListCurrencies.js":"28"},{"size":312,"mtime":1613571445712,"results":"29","hashOfConfig":"30"},{"size":4374,"mtime":1626882291482,"results":"31","hashOfConfig":"30"},{"size":5064,"mtime":499162500000,"results":"32","hashOfConfig":"30"},{"size":4281,"mtime":1626879879396,"results":"33","hashOfConfig":"30"},{"size":1737,"mtime":1619035716963,"results":"34","hashOfConfig":"30"},{"size":4029,"mtime":1623095123620,"results":"35","hashOfConfig":"36"},{"size":5602,"mtime":1626029026812,"results":"37","hashOfConfig":"30"},{"size":897,"mtime":1618274545230,"results":"38","hashOfConfig":"30"},{"size":607,"mtime":1618275072568,"results":"39","hashOfConfig":"30"},{"size":2026,"mtime":1618498648183,"results":"40","hashOfConfig":"30"},{"size":35947,"mtime":1626882396378,"results":"41","hashOfConfig":"30"},{"size":113,"mtime":1614286164946,"results":"42","hashOfConfig":"30"},{"size":1029,"mtime":1623092806907,"results":"43","hashOfConfig":"30"},{"size":2079,"mtime":1614018616533,"results":"44","hashOfConfig":"30"},{"size":2006,"mtime":1614018631753,"results":"45","hashOfConfig":"30"},{"size":2287,"mtime":1618495514413,"results":"46","hashOfConfig":"30"},{"size":1856,"mtime":1614018674603,"results":"47","hashOfConfig":"30"},{"size":6960,"mtime":1622170246282,"results":"48","hashOfConfig":"30"},{"size":2938,"mtime":1612558684386,"results":"49","hashOfConfig":"30"},{"size":2866,"mtime":1626879879396,"results":"50","hashOfConfig":"30"},{"size":1861,"mtime":1613741943732,"results":"51","hashOfConfig":"30"},{"size":2182,"mtime":1612797978795,"results":"52","hashOfConfig":"30"},{"size":1672,"mtime":1618495249932,"results":"53","hashOfConfig":"30"},{"size":7697,"mtime":1623093727159,"results":"54","hashOfConfig":"30"},{"size":4070,"mtime":1612883033051,"results":"55","hashOfConfig":"30"},{"size":1570,"mtime":1618501672103,"results":"56","hashOfConfig":"30"},{"size":3927,"mtime":1626882286287,"results":"57","hashOfConfig":"30"},{"size":1733,"mtime":1626882391475,"results":"58","hashOfConfig":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"1seiekt",{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"61"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bh57vh",{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"61"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"61"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":49,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"61"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"61"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"61"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"61"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"61"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"61"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"61"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"61"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"61"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"61"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"61"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"61"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"61"},"C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\index.js",[],["137","138"],"C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\App.js",["139","140","141"],"import React from \"react\";\r\n//GRID\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n//Tabs\r\nimport Tabs3 from \"./components/Tabs3\";\r\nimport Tabs from \"./components/Tabs\";\r\nimport \"./css/Tabs.css\";\r\nimport AppBar from \"./components/AppBar\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { orange } from '@material-ui/core/colors';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { BrowserRouter as Router, Route, Switch as Switch2 } from \"react-router-dom\";\r\nimport AuthState from \"./Context/AuthContext/AuthState\";\r\nimport Login from \"./components/Login\";\r\nimport PrivateRoute from \"./hocs/PrivateRoute\";\r\nimport UnPrivateRoute from \"./hocs/UnprivateRoute\";\r\nimport Fade from '@material-ui/core/Fade';\r\nimport { SignalCellularNull } from \"@material-ui/icons\";\r\n\r\n//estilos grid\r\nconst useStyles = makeStyles((theme) => ({\r\n  checkLabels: {\r\n    marginTop: 10,\r\n    marginRight: 30,\r\n    color:\"gray\"\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(1),\r\n  },\r\n  paper: {\r\n    // padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    // marginTop: 65,\r\n  },\r\n  borde: {\r\n    borderRadius: \"10px\",\r\n  },\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    root: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(4),\r\n    },\r\n  },\r\n  [theme.breakpoints.down(\"sm\")]: {\r\n    paper: {\r\n      marginTop: 10,\r\n    },\r\n  },\r\n}));\r\n\r\nconst PurpleSwitch = withStyles({\r\n  switchBase: {\r\n    color: orange[300],\r\n    '&$checked': {\r\n      color: orange[500],\r\n    },\r\n    '&$checked + $track': {\r\n      backgroundColor: orange[500],\r\n    },\r\n  },\r\n  checked: {},\r\n  track: {},\r\n})(Switch);\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    checkedA: true\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <>\r\n  {/* Router ppallll test5 */}\r\n      <Router>\r\n        <AuthState>\r\n          <Switch2 >\r\n            <UnPrivateRoute exact path=\"/\" component={Login} />\r\n            <PrivateRoute path=\"/app\" component={() => {\r\n              return (\r\n                <>\r\n                  <AppBar />\r\n                  <div style={{ display: \"none\", justifyContent: \"center\", marginTop: 20, marginBottom: -20 }}>\r\n                    <div className={`${classes.checkLabels}`}>Pirámide</div>\r\n                    <FormGroup>\r\n                      <FormControlLabel\r\n                        control={<PurpleSwitch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\r\n                      // label=\"Recaudos\"\r\n                      />\r\n                    </FormGroup>\r\n                    <div className={`${classes.checkLabels}`}>Inversora</div>\r\n                  </div>\r\n                  {state.checkedA ? (\r\n                    <Fade in={true} timeout={2000}>\r\n                      <div className={`${classes.root}`}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={12} className={classes.borde}>\r\n                            <Paper elevation={20} className={classes.paper}>\r\n                              <Tabs/>\r\n                            </Paper>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </div>\r\n                    </Fade>\r\n                  ) : (\r\n                    // <Fade in={true} timeout={2000}>\r\n                    // <div className={`${classes.root}`}>\r\n                    //     <Grid container spacing={2}>\r\n                    //       <Grid item xs={12} className={classes.borde}>\r\n                    //         <Paper elevation={20} className={classes.paper}>\r\n                    //     <Tabs3 />\r\n                    //         </Paper>\r\n                    //       </Grid>\r\n                    //     </Grid>\r\n                    //   </div>\r\n                    //           </Fade>\r\n                    null\r\n                    )}\r\n                </>\r\n              )\r\n            }} />\r\n\r\n\r\n          </Switch2>\r\n        </AuthState>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Tabs.js",["142"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TabContent from \"./TabContent\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-auto-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-auto-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `scrollable-force-tab-${index}`,\r\n    \"aria-controls\": `scrollable-force-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function ScrollableTabsButtonAuto() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const REACT_API_URL= \"https://emergencia24horas.segurospiramide.com/node/express/servicios/api\"\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"on\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          <Tab label=\"Cotizaciones emitidas vs no emitidas\" {...a11yProps(0)} />\r\n          <Tab label=\"Cotizaciones Piramide\" {...a11yProps(1)} />\r\n          <Tab label=\"Cotizaciones por Productos\" {...a11yProps(2)} />\r\n          <Tab label=\"Cotizaciones por Perfil\" {...a11yProps(3)} />\r\n          <Tab label=\"Pólizas Emitidas por Productos\" {...a11yProps(4)} />\r\n          <Tab label=\"Pólizas Emitidas por Perfil\" {...a11yProps(5)} />\r\n          {/* <Tab label=\"Item Seven\" {...a11yProps(6)} /> */}\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <TabContent\r\n          titulo=\"Porcentajes Totales\"\r\n          url=\"/api/Ver_TotalesPira\"\r\n          urlGraph=\"/api/Ver_TotalesPira\"\r\n          urlGraph2=\"/api/Ver_CotizacionesPiraEmit\"\r\n        />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <TabContent\r\n          titulo=\"Cotizaciones Piramide\"\r\n          url=\"/api/Ver_CotizacionesPira\"\r\n          urlGraph=\"/api/Ver_CotizacionesPira_Productos\"\r\n          urlGraph2=\"/api/Ver_CotizacionesPiraEmit\"\r\n        />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <TabContent\r\n          titulo=\"Cotizaciones por Productos\"\r\n          url=\"/api/Ver_CotizacionesPira_Productos\"\r\n          urlGraph=\"/api/Ver_CotizacionesPira_Productos\"\r\n          urlGraph2=\"/api/Ver_CotizacionesPiraEmit\"\r\n        />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        <TabContent\r\n          titulo=\"Cotizaciones por Perfil\"\r\n          url=\"/api/Ver_CotizacionesPira_Perfil\"\r\n          urlGraph=\"/api/Ver_CotizacionesPira_Perfil\"\r\n          urlGraph2=\"/api/Ver_CotizacionesPiraEmit\"\r\n        />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={4}>\r\n        <TabContent\r\n          titulo=\"Cotizaciones Emitidas por Productos\"\r\n          url=\"/api/Ver_CotizacionesPiraEmit\"\r\n          urlGraph=\"/api/Ver_CotizacionesPiraEmit\"\r\n          urlGraph2=\"/api/Ver_CotizacionesPiraEmit\"\r\n        />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={5}>\r\n        <TabContent\r\n          titulo=\"Cotizaciones Emitidas por Perfil\"\r\n          url=\"/api/Ver_EmisionesPira_Perfil\"\r\n          urlGraph=\"/api/Ver_EmisionesPira_Perfil\"\r\n          urlGraph2=\"/api/Ver_EmisionesPira_Perfil\"\r\n        />\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\AppBar.js",["143","144","145","146","147","148","149","150","151","152"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport img from \"../logo-piramides.svg\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle'; \r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport {withRouter} from \"react-router-dom\"\r\nimport Alert from \"./Alerta\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // position: \"fixed\",\r\n    zIndex: 999999999999,\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n  },\r\n  menu: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  img: {\r\n    width: 150,\r\n    // marginRight:700\r\n  },\r\n}));\r\n\r\nfunction ButtonAppBar(props) {\r\n  const classes = useStyles();\r\n  const [auth, setAuth] = React.useState(true);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleChange = (event) => {\r\n    setAuth(event.target.checked);\r\n  };\r\n  const handleClose = () => {\r\n\r\n    setAnchorEl(null);\r\n    sessionStorage.clear('DATA');\r\n    props.history.push(\"/\");\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={classes.menu}>\r\n          <img src={img} className=\"imgAppBar\" />\r\n\r\n          <div onClick={handleClose} className=\"salir\" style={{ marginLeft: \"40%\", cursor: \"pointer\", color: \"gray\" }}>\r\n            Salir\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(ButtonAppBar)\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Tabs2.js",[],"C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Login.js",["153","154","155","156","157"],"import React, { useContext, useState } from \"react\";\r\nimport AuthContext from \"../Context/AuthContext/AuthContext\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Logo from \"../logo-piramides.svg\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport HttpsIcon from \"@material-ui/icons/Https\";\r\nimport { Button, TextField,InputAdornment,IconButton } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\nimport Alert from \"./Alerta\";\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: \"20px\",\r\n    width: \"100%\",\r\n  },\r\n  text: {\r\n    marginBottom: 25,\r\n  },\r\n  btn: {\r\n    // marginBottom: 30,\r\n    borderRadius: \"50px !important\",\r\n  },\r\n}));\r\n\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n  const { login, userAuth,setUserAuth } = useContext(AuthContext);\r\n  const [user, setUser] = useState({ p_portal_username: \"\", p_pwd: \"\" });\r\n  const [open, setOpen] = React.useState(false); \r\n  const [msn, setMsn] = React.useState(\"\"); \r\n  const [shown, setShown] = React.useState(false);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleClickShowPassword = () => setShown(!shown);\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    setUser({ ...user, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n     // login(user);\r\n      // props.history.push(\"/app\");\r\n\r\n      try{\r\n        // setIsLoaded(false);\r\n        const res = await axios.post(\r\n          \"https://segurospiramide.com/asg-api/login\",\r\n          user\r\n        );\r\n      await sessionStorage.setItem(\"DATA_DASH\", JSON.stringify(res.data));\r\n      setUserAuth(JSON.parse(sessionStorage.getItem(\"DATA_DASH\")).user.PORTAL_USERNAME);\r\n      // setIsLoaded(true);\r\n      props.history.push(\"/app\")\r\n    } catch (error) {\r\n      if (error.response) {\r\n        if (error.response.status == 400) {\r\n          setOpen(true);\r\n          setMsn(\"Usuario o Contraseña incorrecta\")\r\n          props.history.push(\"/\");\r\n        } else {\r\n          // props.history.push(\"/app\");\r\n          setOpen(true);\r\n          setMsn(\"ERROR: \"+ error)\r\n          console.log(error)\r\n        }\r\n      } else if (error.request) {\r\n        setOpen(true);\r\n        setMsn(\"ERROR conectando con el servidor\")\r\n        return error.request\r\n      } else {\r\n        return error.message\r\n      }\r\n    };\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"fondo\">\r\n      <Alert open={open} setOpen={setOpen} handleClose={handleClose} msn={msn}/>\r\n      <Fade in={true} timeout={2000}>\r\n      <div id=\"formLogin\" style={{ display: \"grid\", placeItems:\"center\", marginTop:\"9%\"}}>\r\n     \r\n         \r\n          <form onSubmit={onSubmit} noValidate style={{ display: \"flex\", justifyContent: \"center\",alignItems:\"center\", flexDirection:\"column\", width:\"330px\" }} >\r\n            \r\n\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                flexDirection: \"column\",\r\n                width: \"100%\"\r\n              }}\r\n            >\r\n            <div style={{ display: \"grid\", placeItems: \"center\" }}>\r\n              <HttpsIcon fontSize=\"large\" style={{ color: \"#bd261e\" }} />\r\n              <img src={Logo} style={{ width: 180, marginTop: 10,marginLeft: -15 }} />\r\n            </div>\r\n              <div  style={{ marginTop: \"35px\", width: \"100%\", }}>\r\n              <TextField\r\n                label=\"Nombre de Usuario\"\r\n                type=\"text\"\r\n                name=\"p_portal_username\"\r\n                onChange={onChange}\r\n                // color=\"primary\"\r\n                // className={classes.root}\r\n                style={{ width: \"100%\" }}\r\n                variant=\"outlined\"\r\n              />\r\n              </div>\r\n              <div style={{ marginTop: \"20px\", marginBottom: 30,width: \"100%\", }}>\r\n              <TextField\r\n                label=\"Contraseña\"\r\n                type={shown ? 'text' : 'password'}\r\n                name=\"p_pwd\"\r\n                // color=\"primary\"\r\n                onChange={onChange}\r\n                // className={`${classes.root} ${classes.text}`}\r\n                style={{ width: \"100%\" }}\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                      >\r\n                        {shown ? <Visibility fontSize=\"small\" style={{ color: \"#bd261e\" }} /> : <VisibilityOff fontSize=\"small\" style={{ color: \"#bd261e\" }} />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n              </div>\r\n              <div>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.btn}\r\n                 style={{backgroundColor:\"#bd261e\" , marginBottom: 30, borderRadius: \"50% !important\",width: \"100%\"}}\r\n              >\r\n                Ingresar\r\n              </Button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n      </div>\r\n      </Fade>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n//style={{backgroundColor:\"#bd261e\" , marginBottom: 30, borderRadius: \"50\",width: \"100%\"}}\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\hocs\\PrivateRoute.js",["158"],"import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n// import { AuthContext } from \"../Context/AuthContext\";\r\n\r\n//validando rutas segun si se esta logeado y si se tiene permiso segun el rol de usuario\r\nconst PrivateRoute = ({ component: Component, roles, ...rest }) => {\r\n  //   const { isAuthenticated, user } = useContext(AuthContext);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (!JSON.parse(sessionStorage.getItem(\"DATA_DASH\")))\r\n          return (\r\n            <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\r\n          );\r\n        // if (!roles.includes(user.role))\r\n        // return (\r\n        //   <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\r\n        // );\r\n        return <Component {...props} />;\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\hocs\\UnprivateRoute.js",["159"],"import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n//validando rutas segun si el usuario esta autenticado o no\r\nconst UnPrivateRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (JSON.parse(sessionStorage.getItem(\"DATA_DASH\")))\r\n          return (\r\n            <Redirect\r\n              to={{ pathname: \"/app\", state: { from: props.location } }}\r\n            />\r\n          );\r\n\r\n        return <Component {...props} />;\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default UnPrivateRoute;\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\Context\\AuthContext\\AuthState.js",["160","161"],"import React, { useState, useEffect } from \"react\";\r\nimport AuthContext from \"./AuthContext\";\r\nimport axios from \"axios\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst AuthState = (props) => {\r\n  const [userAuth, setUserAuth] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [isLoaded, setIsLoaded] = useState(true);\r\n\r\n  const login = async (user) => {\r\n    try{\r\n    // setIsLoaded(false);\r\n    const res = await axios.post(\r\n      \"https://segurospiramide.com/asg-api/login\",\r\n      user\r\n    );\r\n    await sessionStorage.setItem(\"DATA_DASH\", JSON.stringify(res.data));     \r\n    setUserAuth(JSON.parse(sessionStorage.getItem(\"DATA_DASH\")).user.PORTAL_USERNAME);\r\n    // setIsLoaded(true);\r\n  } catch (error) {\r\n    if(error.response){\r\n      if(error.response.status == 400){\r\n        alert(\"Usuario o Contrasena incorrecta\")\r\n        props.history.push(\"/\");\r\n      } else{\r\n        //props.history.push(\"/app\");\r\n      }\r\n    }else if(error.request){\r\n      return error.request\r\n    }else{\r\n      return error.message\r\n    }\r\n\r\n    // console.log(res);\r\n  };\r\n}\r\n  useEffect(() => {\r\n    if (JSON.parse(sessionStorage.getItem(\"DATA_DASH\"))) {\r\n      setUserAuth(\r\n        JSON.parse(sessionStorage.getItem(\"DATA_DASH\")).user.PORTAL_USERNAME\r\n      );\r\n      setIsLoaded(true);\r\n    }\r\n  }, [userAuth]);\r\n\r\n  return (\r\n    <div>\r\n      {!isLoaded ? (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            height: \"80vh\",\r\n            alignItems: \"center\",\r\n          }}\r\n      \r\n        >\r\n          <CircularProgress\r\n            style={{\r\n              color: \"#bd261e\"\r\n            }} />\r\n        </div>\r\n      ) : (\r\n        <AuthContext.Provider\r\n          value={{\r\n            login,\r\n            userAuth,\r\n            setUserAuth,\r\n            token,\r\n          }}\r\n        >\r\n          {props.children}\r\n        </AuthContext.Provider>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthState;\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\TabContent.js",["162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210"],"import React, { useEffect, useState } from \"react\";\r\n//GRID\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n// import Fechas from \"./Fechas\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FormControl, TextField } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport axios from \"axios\";\r\nimport { LinearProgress } from \"@material-ui/core\";\r\nimport GridCotOcea from \"./tablas/GridCotOcea\";\r\nimport Grafico from \"./graficos/Grafico\";\r\nimport GridPorcTotal from \"./tablas/GridPorcTotal\";\r\nimport GraficaCotiVsEm from \"./graficos/GraficaCotiVsEm\";\r\nimport GridEmiOceaPerfil from \"./tablas/GridEmiOceaPerfil\"\r\nimport GridDivisEfec from \"./tablas/GridDivisEfec\"\r\n// GridDivisEfec\r\nimport GridCotProdOcea from \"./tablas/GridCotProdOcea\";\r\nimport Graficoproductos from \"./graficos/Graficoproductos\";\r\nimport ExportarExcel from \"./Exportarexcel\";\r\n\r\nimport GridCotOceaPerfil from \"./tablas/GridCotOceaPerfil\";\r\nimport Graficoprodperfil from \"./graficos/Graficoprodperfil\";\r\nimport GrafMtoFaltSobr from \"./graficos/GrafMtoFaltSobr\";\r\nimport GraficoBar from './graficos/GraficoBar'\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport AlertDialogSlide from \"./Alerta\";\r\nimport {useListCurrencies} from '../hooks/useListCurrencies';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  root: {\r\n    // flexGrow: 1,\r\n    padding: theme.spacing(1),\r\n  },\r\n\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  chart: {\r\n    marginBottom: 20,\r\n  },\r\n  //*************stilos FECHAS*************** */\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  button: {\r\n    backgroundColor: \" #bd261e\",\r\n    color: \"white\",\r\n    fontSize: 10,\r\n    borderRadius: 50,\r\n    marginTop: 15,\r\n    marginRight: 10,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  graphBar: {\r\n    height: '815px !important',\r\n    paddingLeft: '60px  !important',\r\n\r\n  },\r\n  [theme.breakpoints.down(\"sm\")]: {\r\n    textField: {\r\n      width: 140,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(1),\r\n    },\r\n  },\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    textField: {\r\n      width: 140,\r\n    },\r\n    paperresp: {\r\n      padding: theme.spacing(1),\r\n      height: 320\r\n    },\r\n  },\r\n  [theme.breakpoints.up(\"md\")]: {\r\n    respHeight: {\r\n      height: 600,\r\n    }\r\n  },\r\n}));\r\n\r\nfunction TabContent({ titulo, url, urlGraph, urlGraph2,TotalIngresosME,ResumenIngresosME }) {\r\n//  const REACT_API_URL_DESA = \"http://10.128.49.125:5000\";\r\n  const REACT_API_URL_DESA = \"https://emergencia24horas.segurospiramide.com/node/express/servicios\";\r\n\r\n  const classes = useStyles();\r\n   //////////////////////////////////////////////\r\n  var fecha_hasta = new Date();\r\n  var strfechahasta =\r\n    fecha_hasta.getDate() +\r\n    \"/\" +\r\n    (fecha_hasta.getMonth() + 1) +\r\n    \"/\" +\r\n    fecha_hasta.getFullYear();\r\n    //////////////////////////////////////\r\n    var fecha_desde = new Date();\r\n    var strfechadesde =\r\n    fecha_desde.getDate() +\r\n      \"/\" +\r\n      (fecha_desde.getMonth() + 1) +\r\n      \"/\" +\r\n      fecha_desde.getFullYear();\r\n    /////////////////////////////////////////\r\n  const [value, setValue] = useState({\r\n    fecha_desde: strfechadesde,\r\n    // fecha_desde: \"20/10/2020\",\r\n    fecha_hasta: strfechahasta\r\n    // cCodMoneda: \"DL\"\r\n  });\r\n  const [cotizaciones, setCotizaciones] = useState([]);\r\n  const [isLoad, setIsLoad] = useState(false);\r\n  const [graphdataCot, setGraphdataCot] = useState([]);\r\n  const [graphdataCot2, setGraphdataCot2] = useState([]);\r\n  const [agencias, setAgencias] = useState([]);\r\n  const [dtosAgencias, setdtosAgencias] = useState([]);\r\n  const [oficina, setOficina] = useState('0');\r\n  const [open, setOpen] = React.useState(false); \r\n  const [msn, setMsn] = React.useState(\"\"); \r\n  const {listCurrencies,moneda, handleChangeMoneda} = useListCurrencies();\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  \r\n  const onChangeVal = (e) => {\r\n    setValue({ ...value, [e.target.name]: e.target.value });\r\n    console.log(value);\r\n  };\r\n  const onSubmit = (e) => {\r\n\r\n    //setIsLoad(false);\r\n\r\n    const arrDesde = value.fecha_desde.split(\"-\");\r\n    const arrHasta = value.fecha_hasta.split(\"-\");\r\n    const fechDesde = arrDesde[2] + \"/\" + arrDesde[1] + \"/\" + arrDesde[0];\r\n    const fechHasta = arrHasta[2] + \"/\" + arrHasta[1] + \"/\" + arrHasta[0];\r\n///////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////\r\n      ////validando que la facha de inicio sea menor a la de culminacion\r\n      const fechaHoy = new Date();\r\n      const startDay = new Date(arrDesde);\r\n      const endDay = new Date(arrHasta);\r\n      if (endDay < startDay) {\r\n        setOpen(true)\r\n        setMsn('La fecha de inicio debe ser menor a la de culminación')\r\n        return \r\n      }\r\n      if (startDay == \"Invalid Date\" || endDay == \"Invalid Date\") {\r\n        setOpen(true)\r\n        setMsn('Favor ingresar la fecha de inicio y culminación');\r\n        return;\r\n      }\r\n///////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////\r\nsetIsLoad(false);\r\n    const fechas = { fecha_desde: fechDesde, fecha_hasta: fechHasta };\r\n    //--------------------------------------------------------------------\r\n    async function fetchData() {\r\n      let responsePromise = []\r\n       //********************************************* */\r\n       const source = axios.CancelToken.source();\r\n       let isMounted = true;\r\n       //********************************************* */\r\n     try {\r\n        //*********************************************** */\r\n      const res = axios.post(REACT_API_URL_DESA+url, fechas, { cancelToken: source.token });\r\n      responsePromise.push(res);\r\n      //*********************************************** */\r\n      if(urlGraph !== \"\"){\r\n        const resGraph = axios.post(REACT_API_URL_DESA+urlGraph, fechas, { cancelToken: source.token });\r\n        responsePromise.push(resGraph);\r\n      }\r\n      //*********************************************** */\r\n      if(urlGraph2 !== \"\"){\r\n\r\n      const resGraph2 = axios.post(REACT_API_URL_DESA+urlGraph2, fechas, { cancelToken: source.token });\r\n      responsePromise.push(resGraph2);\r\n    }\r\n      //*********************************************** */\r\n      let responses = await Promise.all(responsePromise);\r\n      //Setting data\r\n      if (isMounted)  setCotizaciones(responses[0].data);\r\n\r\n      setCotizaciones(responses[0].data);\r\n      if(urlGraph !== \"\" && isMounted){\r\n        setGraphdataCot(responses[1].data);\r\n      }\r\n      if(urlGraph2 !== \"\" && isMounted){\r\n        setGraphdataCot2(responses[2].data);\r\n      }\r\n\r\n      await setIsLoad(true);\r\n     } catch (error) {\r\n       console.log(error)\r\n     }\r\n     return () => {\r\n        isMounted = false;\r\n        source.cancel();\r\n    };\r\n    }\r\n    fetchData();\r\n  };\r\n\r\n    useEffect(() => {\r\n      //********************************************* */\r\n      const source = axios.CancelToken.source();\r\n      let isMounted = true;\r\n      //********************************************* */\r\n      try {\r\n       if(titulo === \"Efectivo / Sobrantes / Faltantes\"){\r\n        const actualiza =async () =>{\r\n         // const valorActualSelect = document.getElementById(\"listaAgencias\").value\r\n         // alert(valorActualSelect)\r\n          const resTotalIngresos = await axios.post(`${REACT_API_URL_DESA}/${TotalIngresosME}`, {...value,\"cCodOfi\":oficina}, { cancelToken: source.token })\r\n          // responsePromise.push(resTotalIngresos);\r\n          if (isMounted) setdtosAgencias(resTotalIngresos.data)\r\n        // await setdtosAgencias(resTotalIngresos.data)\r\n        }\r\n        actualiza()\r\n     }\r\n      } catch (error) {\r\n        if (!isMounted) return; // comp alresady unmounted, nothing to do\r\n        if (axios.isCancel(error)) console.log(error);\r\n        else console.log(error);\r\n      }\r\n        //cancelando subscripciones\r\n        return () => {\r\n          isMounted = false;\r\n          source.cancel();\r\n      };\r\n     }, [])\r\n     \r\n    useEffect(() => {\r\n      //********************************************* */\r\n      const source = axios.CancelToken.source();\r\n      let isMounted = true;\r\n      //********************************************* */\r\n     try {\r\n       \r\n      if(titulo === \"Efectivo / Sobrantes / Faltantes\"){\r\n       \r\n       const actualiza =async () =>{\r\n         const resTotalIngresos = await axios.post(`${REACT_API_URL_DESA}/${TotalIngresosME}`, {...value, \"cCodOfi\":oficina} , { cancelToken: source.token })\r\n         if (isMounted) setdtosAgencias(resTotalIngresos.data)\r\n  \r\n       }    \r\n       actualiza()\r\n    }\r\n     } catch (error) {\r\n          if (!isMounted) return; // comp already unmounted, nothing to do\r\n          if (axios.isCancel(error)) console.log(error);\r\n          else console.log(error);\r\n     }\r\n    //cancelando subscripciones\r\n      return () => {\r\n          isMounted = false;\r\n          source.cancel();\r\n      };\r\n    }, [dtosAgencias])\r\n\r\n    useEffect(() => {\r\n\r\n      var fec_hasta_Ini_DT =\r\n        fecha_hasta.getFullYear() +\r\n        \"-\" +\r\n        (fecha_hasta.getMonth() + 1) +\r\n        \"-\" +\r\n        fecha_hasta.getDate();\r\n      var lmes = (fecha_hasta.getMonth() + 1).toString();\r\n      var ldia = fecha_hasta.getDate();\r\n      if (lmes < 9) {\r\n        var mes = \"0\" + (fecha_hasta.getMonth() + 1);\r\n\r\n        if (ldia < 10) {\r\n          var dia = \"0\" + fecha_hasta.getDate();\r\n          // fec_hasta_Ini_DT = dia + mes + fecha_hasta.getFullYear();\r\n         fec_hasta_Ini_DT = fecha_hasta.getFullYear() + \"-\" + mes + \"-\" + dia;\r\n        } else {\r\n          fec_hasta_Ini_DT = fecha_hasta.getFullYear() + \"-\" + mes + \"-\" + fecha_hasta.getDate();\r\n          // fec_hasta_Ini_DT = dia + mes + fecha_hasta.getFullYear();\r\n\r\n        }\r\n      }\r\n      //********************************************* */\r\n      const source = axios.CancelToken.source();\r\n      let isMounted = true;\r\n      //********************************************* */\r\n      async function fetchData() {\r\n        let responsePromise = []\r\n        try {\r\n          // alert(REACT_API_URL_DESA+url)\r\n          const res = axios.post(REACT_API_URL_DESA+url, value, { cancelToken: source.token });\r\n          responsePromise.push(res);\r\n    \r\n          if(urlGraph !== \"\"){\r\n            const resGraph = axios.post(REACT_API_URL_DESA+urlGraph, value, { cancelToken: source.token });\r\n            responsePromise.push(resGraph);\r\n          }\r\n\r\n          if(urlGraph2 !== \"\"){\r\n            const resGraph2 = axios.post(REACT_API_URL_DESA+urlGraph2, value, { cancelToken: source.token });\r\n            responsePromise.push(resGraph2);\r\n          }\r\n    \r\n          if(titulo === \"Efectivo / Sobrantes / Faltantes\"){\r\n            // http://localhost:5000/recaudosApi/ResumenIngresosInverME\r\n            \r\n\r\n            //formateando fecha para que el api funcione 12345\r\n            // let arrayfechaDesde = value.fecha_desde.split(\"-\")\r\n            // if(arrayfechaDesde.length == 2){\r\n            //   let anioDesde =arrayfechaDesde[0]\r\n            //   let mesDesde =arrayfechaDesde[1]\r\n            //   let diaDesde =arrayfechaDesde[2]\r\n            //   let arrayfechaDesdeFormateada= diaDesde+ \"/\"+mesDesde+\"/\"+anioDesde;\r\n            //   alert(\"aaaaaa\"+arrayfechaDesdeFormateada)\r\n            // }\r\n\r\n            let valorParametrosInicial = {\r\n              \"fecha_desde\": strfechadesde,\r\n              \"fecha_hasta\": strfechahasta,\r\n              \"cCodMoneda\": \"DL\"\r\n            }\r\n\r\n            let url=`${REACT_API_URL_DESA}/${ResumenIngresosME}`;\r\n           \r\n           // alert(\"******\"+JSON.stringify(valorParametrosInicial))\r\n           \r\n            const resAgencias = axios.post(\r\n              url, \r\n              valorParametrosInicial, \r\n              { cancelToken: source.token }\r\n            );\r\n            responsePromise.push(resAgencias);\r\n            \r\n            const resTotalIngresos = await axios.post(\r\n              `${REACT_API_URL_DESA}/${TotalIngresosME}`, \r\n              {...value, \"cCodOfi\":\"0\"}, \r\n              { cancelToken: source.token }\r\n            )\r\n             responsePromise.push(resTotalIngresos);\r\n          }\r\n    \r\n          let responses = await Promise.all(responsePromise);\r\n          // console.log(responses)\r\n          //Setting data\r\n          if (isMounted)  setCotizaciones(responses[0].data);\r\n         \r\n          if(urlGraph !== \"\" && isMounted){\r\n            setGraphdataCot(responses[1].data);\r\n          }\r\n          if(urlGraph2 !== \"\" && isMounted){\r\n            setGraphdataCot2(responses[2].data);\r\n          }\r\n          if (titulo === \"Efectivo / Sobrantes / Faltantes\") {\r\n            if (isMounted){\r\n              setAgencias(responses[1].data)\r\n             // alert(responses[1].data)\r\n              setdtosAgencias(responses[2].data)//datos por defecto que se pasa al grafico de totales\r\n              \r\n            }\r\n          }\r\n    \r\n          await setValue({\r\n            fecha_desde: fec_hasta_Ini_DT,\r\n            fecha_hasta: fec_hasta_Ini_DT,\r\n          });\r\n          await setIsLoad(true);\r\n\r\n        } catch (error) {\r\n              if (!isMounted) return;\r\n              if (axios.isCancel(error)) console.log(error);\r\n              else console.log(error);\r\n              console.log(error)\r\n        }\r\n      \r\n      }\r\n      fetchData();\r\n    \r\n      return () => {\r\n        isMounted = false;\r\n        source.cancel();\r\n      };\r\n    }, []);\r\n \r\n  //######################MANEJADORES EVENTOS DEL SELECT NUEVO(EFECTIVO/SOBRANTE/FALTANTE)##########\r\n  //################################################################################################\r\n  const handleChangeOfic = (e)=>{\r\n    setOficina(e.target.value)\r\n    setCotizaciones(dtosAgencias)\r\n  }\r\n\r\n  const handleChange = async (e) => {\r\n    const source = axios.CancelToken.source();\r\n    let isMounted = true;\r\n    try {\r\n      // await setIsLoad(false);\r\n\r\n      const arrDesde = value.fecha_desde.split(\"-\");\r\n      const arrHasta = value.fecha_hasta.split(\"-\");\r\n      const fechDesde = arrDesde[2] + \"/\" + arrDesde[1] + \"/\" + arrDesde[0];\r\n      const fechHasta = arrHasta[2] + \"/\" + arrHasta[1] + \"/\" + arrHasta[0];\r\n      ///////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////\r\n      ////validando que la facha de inicio sea menor a la de culminacion\r\n      const fechaHoy = new Date();\r\n      const startDay = new Date(arrDesde);\r\n      const endDay = new Date(arrHasta);\r\n      if (endDay < startDay) {\r\n        setOpen(true)\r\n        setMsn('La fecha de inicio debe ser menor a la de culminación')\r\n        return \r\n      }\r\n      if (startDay == \"Invalid Date\" || endDay == \"Invalid Date\") {\r\n        setOpen(true)\r\n        setMsn('Favor ingresar la fecha de inicio y culminación');\r\n        return;\r\n      }\r\n///////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////\r\nawait setIsLoad(false);\r\n\r\nconst fechas = { fecha_desde: fechDesde, fecha_hasta: fechHasta, cCodMoneda:moneda, cCodOfi: oficina };\r\n      // alert(JSON.stringify(fechas))\r\n\r\n      const respTotalxAgencia = async () => {\r\n        const valoresApi = { fecha_desde: fechDesde, fecha_hasta: fechHasta, cCodMoneda:moneda };\r\n        let agencias = await axios.post(`${REACT_API_URL_DESA}/${ResumenIngresosME}`, valoresApi)\r\n            setAgencias(agencias.data)\r\n        //  alert(JSON.stringify(agencias.data))\r\n        alert(`${REACT_API_URL_DESA}/${TotalIngresosME}`)\r\n        const res = await axios.post(`${REACT_API_URL_DESA}/${TotalIngresosME}`, fechas, { cancelToken: source.token })\r\n        if (isMounted){\r\n          if(oficina == 0) {\r\n            // setdtosAgencias([])\r\n            // setCotizaciones([])\r\n            // alert(JSON.stringify(agencias))\r\n            let res1 = await axios.post(`${REACT_API_URL_DESA}/${ResumenIngresosME}`, fechas)\r\n            // alert(JSON.stringify(res1.data))\r\n      \r\n             setdtosAgencias(res1.data)\r\n             setCotizaciones(res1.data)//estado del grafico\r\n          } else{\r\n\r\n            setdtosAgencias(res.data)\r\n            setCotizaciones(res.data)\r\n            // await setdtosAgencias(res.data)\r\n            // alert(\"desde tabContent::\" + JSON.stringify(res.data))\r\n            setOficina(fechas.cCodOfi)\r\n          }\r\n          await setIsLoad(true);\r\n        }\r\n      }\r\n\r\n      respTotalxAgencia();\r\n    } catch (error) {\r\n      if (!isMounted) return;\r\n      if (axios.isCancel(error)) console.log(error);\r\n      else console.log(error);\r\n      console.log(error)\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n      source.cancel();\r\n    };\r\n  };\r\n//####################################################################################\r\n//####################################################################################\r\n\r\n  return (\r\n    <>\r\n    <AlertDialogSlide open={open} setOpen={setOpen} handleClose={handleClose} msn={msn}/>\r\n      {!isLoad ? (\r\n        <>\r\n          <LinearProgress />\r\n        </>\r\n      ) : (\r\n          <>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                {/* *******************CONTROLES DE FECHAS************************ */}\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <Paper elevation={3} className={classes.paper}>\r\n                      <Grid container spacing={2}>\r\n                        <Grid item xs={6} sm={4} md={3} lg={2}>\r\n                          <TextField\r\n                            name=\"fecha_desde\"\r\n                            id=\"fecha_desde\"\r\n                            label=\"Fecha Inicio\"\r\n                            type=\"date\"\r\n                            value={value.fecha_desde}\r\n                            //defaultValue=\"2017-05-24\"\r\n                            className={classes.textField}\r\n                            InputLabelProps={{\r\n                              shrink: true,\r\n                            }}\r\n                            onChange={onChangeVal}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6} sm={4} md={2} lg={2}>\r\n                          <TextField\r\n                            name=\"fecha_hasta\"\r\n                            id=\"fecha_hasta\"\r\n                            label=\"Fecha Culminación\"\r\n                            type=\"date\"\r\n                            // defaultValue=\"2017-05-24\"\r\n                            className={classes.textField}\r\n                            InputLabelProps={{\r\n                              shrink: true,\r\n                            }}\r\n                            value={value.fecha_hasta}\r\n                            onChange={onChangeVal}\r\n                          />\r\n                        </Grid>\r\n                        {/* <Grid item xs={6} sm={4} md={2} lg={2}>\r\n                          <InputLabel style={{ fontSize: 12, marginBottom: 4, textAlign:\"left\", marginLeft:20 }}>Moneda</InputLabel>\r\n                                <Select\r\n                                  onChange={handleChangeMoneda}\r\n                                  value={moneda}\r\n                                  id=\"listaMoneda\"\r\n                                  style={{ width: 150,fontSize: 12,textTransform:\"capitalize\" }}\r\n                                >\r\n                                  {listCurrencies.map((moneda) => {\r\n                                    return (\r\n                                      <MenuItem\r\n                                        key={moneda.CODMONEDA}\r\n                                        name={moneda.CODMONEDA}\r\n                                        value={moneda.CODMONEDA}\r\n                                        style={{fontSize: 12 }}\r\n                                      >\r\n                                        {moneda.DESCMONEDA}\r\n                                      </MenuItem>\r\n                                    )\r\n                                  })}\r\n                                </Select>\r\n                        </Grid> */}\r\n                       \r\n                      \r\n{/* AGENCIASSSS************************************************************************************************************ */}\r\n{/* AGENCIASSSS************************************************************************************************************ */}\r\n                           {titulo === \"Efectivo / Sobrantes / Faltantes\" ? (\r\n                          <>\r\n                            <Grid\r\n                              item\r\n                              style={{ display: \"flex\", flexDirection: 'column' }}\r\n                              xs={6}\r\n                              sm={4}\r\n                              md={3}\r\n                              lg={2}\r\n                            >\r\n                              <FormControl >\r\n                                <InputLabel style={{ fontSize: 12, marginBottom: 4 }}>Agencias</InputLabel>\r\n                                <Select\r\n                                  onChange={handleChangeOfic}\r\n                                  value={oficina}\r\n                                  id=\"listaAgencias\"\r\n                                  style={{ width: 150,fontSize: 12,textTransform:\"capitalize\" }}\r\n                                >\r\n                                  <MenuItem këy=\"0\" value=\"0\"  style={{fontSize: 12 }}>TODAS</MenuItem>\r\n                                  {agencias.map((oficina) => {\r\n                                    return (\r\n                                      <MenuItem\r\n                                        key={oficina.CODIGO_OFICINA}\r\n                                        name={oficina.CODIGO_OFICINA}\r\n                                        value={oficina.CODIGO_OFICINA}\r\n                                        style={{fontSize: 12 }}\r\n                                      >\r\n                                        {oficina.OFICINA}\r\n                                      </MenuItem>\r\n                                    )\r\n                                  })}\r\n                                </Select>\r\n                              </FormControl>\r\n                            </Grid>\r\n                            <Grid\r\n                              item\r\n                              style={{ display: \"flex\" }}\r\n                              xs={12}\r\n                              sm={4}\r\n                              md={3}\r\n                              lg={4}\r\n                            >\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={classes.button}\r\n                                startIcon={<SearchIcon fontSize=\"small\" />}\r\n                                onClick={handleChange}\r\n                                style={{ marginRight: 20 }}\r\n                                size=\"small\"\r\n                              >\r\n                                Buscar\r\n                           </Button>\r\n                              <ExportarExcel titulo={titulo} enviarjsonGrid={cotizaciones} />\r\n                            </Grid>\r\n                           \r\n                          </>\r\n                           ) : (\r\n                            <>\r\n                             \r\n                            <Grid\r\n                            item\r\n                            style={{ display: \"flex\" }}\r\n                            xs={12}\r\n                            sm={4}\r\n                            md={3}\r\n                            lg={4}\r\n                            >\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={classes.button}\r\n                                startIcon={<SearchIcon fontSize=\"small\" />}\r\n                                onClick={onSubmit}\r\n                                style={{ marginRight: 20 }}\r\n                                size=\"small\"\r\n                              >\r\n                                Buscar\r\n                          </Button>\r\n                           <ExportarExcel titulo={titulo}  enviarjsonGrid={cotizaciones} />\r\n                          </Grid>\r\n                          </>\r\n                           )}                     \r\n{/* AGENCIASSSS************************************************************************************************************ */}\r\n{/* AGENCIASSSS************************************************************************************************************ */}\r\n                      </Grid>\r\n                    </Paper>\r\n                  </Grid>\r\n                </Grid>\r\n                {/* ************************************************ */}\r\n              </Grid>\r\n              <>\r\n                {titulo == \"Porcentajes Totales\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={8}>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        <GridPorcTotal enviardataGrid={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} md={4}>\r\n                      <Paper\r\n                        elevation={8}\r\n                        className={`${classes.paper} ${classes.chart} ${classes.paperresp}`}\r\n                      >\r\n                        <GraficaCotiVsEm enviardataGraph={graphdataCot} />\r\n                      </Paper>\r\n                    </Grid>\r\n                  </>\r\n                ) : titulo == \"Cotizaciones Piramide\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={8}>\r\n                      <Paper elevation={8} className={`${classes.paper} ${classes.respHeight}`}>\r\n                        <GridCotOcea enviardataGrid={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} md={4}>\r\n                      <Paper\r\n                        elevation={8}\r\n                        className={`${classes.paper} ${classes.chart} `}\r\n                      >\r\n                        <Grafico\r\n                          enviardataGraph={graphdataCot}\r\n                          valor=\"realizadas\"\r\n                        />\r\n                      </Paper>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        <Grafico\r\n                          enviardataGraph={graphdataCot2}\r\n                          valor=\"emitidas\"\r\n                        />\r\n                      </Paper>\r\n                    </Grid>\r\n                  </>\r\n                ) : titulo == \"Cotizaciones por Productos\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={8}>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        <GridCotProdOcea enviardataGrid={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} md={4}>\r\n                      <Paper\r\n                        elevation={8}\r\n                        className={`${classes.paper} ${classes.chart} ${classes.paperresp}`}\r\n                      >\r\n                        {/* <Graficoproductos enviardataGraph={graphdataCot} /> */}\r\n                        <Grafico\r\n                          enviardataGraph={graphdataCot}\r\n                          valor=\"productos\"\r\n                        />\r\n                      </Paper>\r\n                    </Grid>\r\n                  </>\r\n                ) : titulo == \"Cotizaciones por Perfil\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={8}>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        <GridCotOceaPerfil enviardataGrid={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} md={4}>\r\n                      <Paper\r\n                        elevation={8}\r\n                        className={`${classes.paper} ${classes.chart}`}\r\n                        style={{ height: 300 }}\r\n                      >\r\n                        <Graficoprodperfil enviardataGraph={graphdataCot} valor=\"prodPerfil\" />\r\n\r\n                      </Paper>\r\n                    </Grid>\r\n                  </>\r\n                ) : titulo == \"Cotizaciones Emitidas por Productos\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={8}>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        <GridCotProdOcea enviardataGrid={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} md={4}>\r\n                      <Paper\r\n                        elevation={8}\r\n                        className={`${classes.paper} ${classes.chart} ${classes.paperresp}`}\r\n                      >\r\n                        <Grafico enviardataGraph={graphdataCot} valor=\"emitXprod\" />\r\n                      </Paper>\r\n                    </Grid>\r\n                  </>\r\n                ) : titulo == \"Cotizaciones Emitidas por Perfil\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={8}>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        <GridEmiOceaPerfil enviardataGrid={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} md={4}>\r\n                      <Paper\r\n                        elevation={8}\r\n                        className={`${classes.paper} ${classes.chart} ${classes.paperresp}`}\r\n                      >\r\n                        <Graficoprodperfil enviardataGraph={graphdataCot} valor=\"emitXperfil\" />\r\n                      </Paper>\r\n                    </Grid>\r\n                  </>\r\n                ) : titulo == \"Recaudo de Divisas en Efectivo\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={4}>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        {/* <GridEmiOceaPerfil enviardataGrid={cotizaciones} /> */}\r\n                        <GridDivisEfec valor={titulo} enviardataGrid={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} md={8} >\r\n                      <Paper\r\n                        elevation={8}\r\n                        className={`${classes.paper} ${classes.chart} ${classes.paperresp} ${classes.graphBar}`}\r\n                      >\r\n                        <GraficoBar valor=\"Recaudo de Divisas en Efectivo\" enviardataGraph={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                  </>\r\n                ) : titulo == \"Recaudación Divisas-Efectivo-Sobrantes\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={4}>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        {/* <GridEmiOceaPerfil enviardataGrid={cotizaciones} /> */}\r\n                        <GridDivisEfec valor={titulo} enviardataGrid={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} md={8} >\r\n                      <Paper\r\n                        elevation={8}\r\n                        className={`${classes.paper} ${classes.chart} ${classes.paperresp} ${classes.graphBar}`}\r\n                      >\r\n                        <GraficoBar valor=\"Recaudación Divisas-Efectivo-Sobrantes\" enviardataGraph={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                  </>\r\n                ) : titulo == \"Recaudación Divisas - Efectivo - Faltantes\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={4}>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        {/* <GridEmiOceaPerfil enviardataGrid={cotizaciones} /> */}\r\n                        <GridDivisEfec valor={titulo} enviardataGrid={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} md={8} >\r\n                      <Paper\r\n                        elevation={8}\r\n                        className={`${classes.paper} ${classes.chart} ${classes.paperresp} ${classes.graphBar}`}\r\n                      >\r\n                        <GraficoBar valor=\"Recaudación Divisas - Efectivo - Faltantes\" enviardataGraph={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                  </>\r\n                ) \r\n                : titulo == \"Efectivo / Sobrantes / Faltantes\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={6}>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        <GridDivisEfec valor={titulo} enviardataGrid={cotizaciones} dtosAgencias={dtosAgencias} />\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} md={6} >\r\n                      <Paper\r\n                        elevation={8}\r\n                        className={`${classes.paper} ${classes.chart} ${classes.paperresp} ${classes.graphBar}`}\r\n                      >\r\n                        <GraficoBar valor=\"Efectivo / Sobrantes / Faltantes\" enviardataGraph={dtosAgencias} enviardataGrid={cotizaciones}/>\r\n                        {/* <GrafMtoFaltSobr valor={titulo}  dtosAgencias={dtosAgencias} /> */}\r\n                        {/* <GraficaCotiVsEm enviardataGraph={graphdataCot} /> */}\r\n                      </Paper>\r\n                    </Grid>\r\n                  </>\r\n                ) \r\n                :titulo == \"Recaudación Divisas - Efectivo - Faltantes y Sobrantes\" ? (\r\n                  <>\r\n                    <Grid item xs={12} sm={12} md={12} md={12}>\r\n                      <Paper elevation={8} className={classes.paper}>\r\n                        <GridDivisEfec valor=\"Recaudación Divisas - Efectivo - Faltantes y Sobrantes\" enviardataGrid={cotizaciones} />\r\n                      </Paper>\r\n                    </Grid>\r\n                  \r\n                  </>\r\n                ) : (\r\n                                      \"Otra Opcion\"\r\n                                    )}\r\n              </>\r\n            </Grid>\r\n          </>\r\n        )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TabContent;\r\n\r\n{\r\n  /* <Grid item xs={12} sm={12} md={12} md={8}>\r\n<Paper elevation={8} className={classes.paper}>\r\n  <XGrid />\r\n</Paper>\r\n</Grid>\r\n<Grid item xs={12} sm={12} md={12} md={4}>\r\n<Paper\r\n  elevation={8}\r\n  className={`${classes.paper} ${classes.chart}`}\r\n>\r\n  <Chart />\r\n</Paper>\r\n<Paper elevation={8} className={classes.paper}>\r\n  <Chart />\r\n</Paper>\r\n</Grid> */\r\n}\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\Context\\AuthContext\\AuthContext.js",[],"C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Exportarexcel.js",["211","212","213"],"import React, { useState, useEffect } from \"react\";\r\nimport ExportExcel from \"react-export-excel\";\r\nimport excel from \"../excel1.svg\"\r\nimport { ButtonBase } from \"@material-ui/core\";\r\n\r\nconst ExcelFile = ExportExcel.ExcelFile;\r\nconst ExcelSheet = ExportExcel.ExcelSheet;\r\nconst ExcelColumn = ExportExcel.ExcelColumn;\r\n\r\nfunction Exportarexcel({ enviarjsonGrid, titulo }) {\r\n\r\n  return (\r\n    <div className=\"btnExportarExcel\">\r\n      <ExcelFile\r\n        element={\r\n        <ButtonBase style={{marginTop:\"10px\"}} >\r\n          <img src={excel} style={{width:\"30px\"}}  />\r\n          <span style={{color:\"green\", fontSize:11}}>DESCARGAR EXCEL</span>\r\n        </ButtonBase>\r\n        }\r\n        filename={titulo}\r\n      >\r\n        <ExcelSheet data={enviarjsonGrid} name={titulo}>\r\n          {enviarjsonGrid[0] && Object.keys(enviarjsonGrid[0]).map(columna => (\r\n            <ExcelColumn label={columna} value={columna} />\r\n          ))}\r\n        </ExcelSheet>\r\n      </ExcelFile>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Exportarexcel;\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridCotProdOcea.js",["214"],"import React, { useEffect, useState, useStyles } from \"react\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport moment from \"moment\";\r\nimport PropTypes from \"prop-types\";\r\nimport { XGrid } from \"@material-ui/x-grid\";\r\n\r\nconst columns = [\r\n  { field: \"AREA\", headerName: \"Área\", width: 200, fontSize: \"18px\" },\r\n  {\r\n    field: \"COTIZACIONES\",\r\n    headerName: \"Polizas\",\r\n    width: 120,\r\n    type: \"number\",\r\n  },\r\n ];\r\n\r\nexport default function App({ enviardataGrid }) {\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"prod ocea\" + enviardataGrid);\r\n\r\n    var ArrCotizaciones = enviardataGrid.map((item) => {\r\n      // var fecha_ini = item.DATE_CREATION.substring(0, 10);\r\n\r\n      //  var fecha = moment(fecha_ini, 'YYYY-MM-DD', true).format(\"DD/MM/YYYY\");\r\n      return {\r\n        id: item.COTIZACIONES,\r\n        COTIZACIONES: item.COTIZACIONES,\r\n        AREA: item.AREA,\r\n      };\r\n    });\r\n\r\n    setRows(ArrCotizaciones);\r\n  }, [enviardataGrid]);\r\n\r\n  function CustomPagination(props) {\r\n    const { state, api } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <Pagination\r\n        className={classes.root}\r\n        color=\"primary\"\r\n        page={state.pagination.page}\r\n        count={state.pagination.pageCount}\r\n        onChange={(event, value) => api.current.setPage(value)}\r\n      />\r\n    );\r\n  }\r\n\r\n  CustomPagination.propTypes = {\r\n    /**\r\n     * ApiRef that let you manipulate the grid.\r\n     */\r\n    api: PropTypes.shape({\r\n      current: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    /**\r\n     * The GridState object containing the current grid state.\r\n     */\r\n    state: PropTypes.object.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div id=\"GridCotProd\" style={{ height: 300 }}>\r\n      <XGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pagination\r\n        pageSize={5}\r\n        rowsPerPageOptions={[10, 20, 30]}\r\n        showToolbar\r\n        density=\"compact\"\r\n        // filterModel={{\r\n        //   items: [\r\n\r\n        //   ],\r\n        // }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridCotOceaPerfil.js",["215"],"import React, { useEffect, useState, useStyles } from \"react\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport moment from \"moment\";\r\nimport PropTypes from \"prop-types\";\r\nimport { XGrid } from \"@material-ui/x-grid\";\r\n\r\nconst columns = [\r\n  { field: \"PERFIL\", headerName: \"Perfil\", width: 170, fontSize: \"18px\" },\r\n  {\r\n    field: \"COTIZACIONES\",\r\n    headerName: \"Cotizaciones\",\r\n    width: 140,\r\n    type: \"number\",\r\n  },\r\n];\r\n\r\nexport default function App({ enviardataGrid }) {\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"prod ocea\" + enviardataGrid);\r\n\r\n    var ArrCotizaciones = enviardataGrid.map((item) => {\r\n      // var fecha_ini = item.DATE_CREATION.substring(0, 10);\r\n\r\n      //  var fecha = moment(fecha_ini, 'YYYY-MM-DD', true).format(\"DD/MM/YYYY\");\r\n      return {\r\n        id: item.COTIZACIONES,\r\n        COTIZACIONES: item.COTIZACIONES,\r\n        PERFIL: item.PERFIL,\r\n      };\r\n    });\r\n\r\n    setRows(ArrCotizaciones);\r\n  }, [enviardataGrid]);\r\n\r\n  function CustomPagination(props) {\r\n    const { state, api } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <Pagination\r\n        className={classes.root}\r\n        color=\"primary\"\r\n        page={state.pagination.page}\r\n        count={state.pagination.pageCount}\r\n        onChange={(event, value) => api.current.setPage(value)}\r\n      />\r\n    );\r\n  }\r\n\r\n  CustomPagination.propTypes = {\r\n    /**\r\n     * ApiRef that let you manipulate the grid.\r\n     */\r\n    api: PropTypes.shape({\r\n      current: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    /**\r\n     * The GridState object containing the current grid state.\r\n     */\r\n    state: PropTypes.object.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div id=\"GridCotProd\" style={{ height: 300 }}>\r\n      <XGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pagination\r\n        pageSize={5}\r\n        rowsPerPageOptions={[10, 20, 30]}\r\n        showToolbar\r\n        density=\"compact\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridPorcTotal.js",["216"],"import React, { useEffect, useState, useStyles } from \"react\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport moment from \"moment\";\r\nimport PropTypes from \"prop-types\";\r\nimport { XGrid } from \"@material-ui/x-grid\";\r\n\r\nconst columns = [\r\n  {\r\n    field: \"id\",\r\n    headerName: \"Total Cotizaciones\",\r\n    width: 180,\r\n    fontSize: \"18px\",\r\n  },\r\n  {\r\n    field: \"COTIZACIONES_EMITIDAS\",\r\n    headerName: \"Emitidas\",\r\n    width: 120,\r\n    type: \"number\",\r\n  },\r\n  {\r\n    field: \"COTIZACIONES_NO_EMITIDAS\",\r\n    headerName: \"No Emitidas\",\r\n    width: 140,\r\n    type: \"number\",\r\n    display: \"none\",\r\n  },\r\n\r\n];\r\n\r\nexport default function App({ enviardataGrid }) {\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"prod ocea\" + enviardataGrid);\r\n\r\n    var ArrCotizaciones = enviardataGrid.map((item) => {\r\n      // var fecha_ini = item.DATE_CREATION.substring(0, 10);\r\n\r\n      //  var fecha = moment(fecha_ini, 'YYYY-MM-DD', true).format(\"DD/MM/YYYY\");\r\n      return {\r\n        id: item.TOTAL_COTIZACIONES,\r\n        TOTAL_COTIZACIONES: item.TOTAL_COTIZACIONES,\r\n        COTIZACIONES_EMITIDAS: item.COTIZACIONES_EMITIDAS,\r\n        PORC_COT_EMITIDAS: item.PORC_COT_EMITIDAS,\r\n        COTIZACIONES_NO_EMITIDAS: item.COTIZACIONES_NO_EMITIDAS,\r\n        PORC_COT_NO_EMITIDAS: item.PORC_COT_NO_EMITIDAS,\r\n      };\r\n    });\r\n\r\n    setRows(ArrCotizaciones);\r\n  }, [enviardataGrid]);\r\n\r\n  function CustomPagination(props) {\r\n    const { state, api } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <Pagination\r\n        className={classes.root}\r\n        color=\"primary\"\r\n        page={state.pagination.page}\r\n        count={state.pagination.pageCount}\r\n        onChange={(event, value) => api.current.setPage(value)}\r\n      />\r\n    );\r\n  }\r\n\r\n  CustomPagination.propTypes = {\r\n   \r\n    api: PropTypes.shape({\r\n      current: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n  \r\n    state: PropTypes.object.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div id=\"GridCotProd\" style={{ height: 300, width: \"100%\" }}>\r\n      <XGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pagination\r\n        pageSize={5}\r\n        rowsPerPageOptions={[10, 20, 30]}\r\n        showToolbar\r\n        density=\"compact\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridEmiOceaPerfil.js",["217"],"import React, { useEffect, useState, useStyles } from \"react\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport moment from \"moment\";\r\nimport PropTypes from \"prop-types\";\r\nimport { XGrid } from \"@material-ui/x-grid\";\r\n\r\nconst columns = [\r\n  { field: \"PERFIL\", headerName: \"Perfil\", width: 200, fontSize: \"18px\" },\r\n  {\r\n    field: \"COTIZACIONES\",\r\n    headerName: \"Pólizas\",\r\n    width: 100,\r\n    type: \"number\",\r\n  },\r\n];\r\n\r\nexport default function App({ enviardataGrid }) {\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"prod ocea\" + enviardataGrid);\r\n\r\n    var ArrCotizaciones = enviardataGrid.map((item) => {\r\n\r\n      return {\r\n        id: item.COTIZACIONES,\r\n        COTIZACIONES: item.COTIZACIONES,\r\n        PERFIL: item.PERFIL,\r\n      };\r\n    });\r\n\r\n    setRows(ArrCotizaciones);\r\n  }, [enviardataGrid]);\r\n\r\n  function CustomPagination(props) {\r\n    const { state, api } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <Pagination\r\n        className={classes.root}\r\n        color=\"primary\"\r\n        page={state.pagination.page}\r\n        count={state.pagination.pageCount}\r\n        onChange={(event, value) => api.current.setPage(value)}\r\n      />\r\n    );\r\n  }\r\n\r\n  CustomPagination.propTypes = {\r\n    /**\r\n     * ApiRef that let you manipulate the grid.\r\n     */\r\n    api: PropTypes.shape({\r\n      current: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    /**\r\n     * The GridState object containing the current grid state.\r\n     */\r\n    state: PropTypes.object.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div id=\"GridCotProd\" style={{ height: 300 }}>\r\n      <XGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pagination\r\n        pageSize={5}\r\n        rowsPerPageOptions={[10, 20, 30]}\r\n        showToolbar\r\n        density=\"compact\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridDivisEfec.js",["218","219","220","221","222","223","224","225","226","227"],"import React, { useEffect, useState, useStyles } from \"react\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport PropTypes from \"prop-types\";\r\nimport { XGrid } from \"@material-ui/x-grid\";\r\n\r\nvar columns = []\r\nexport default function App({ enviardataGrid,valor,dtosAgencias }) {\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(valor == \"Recaudación Divisas - Efectivo - Faltantes y Sobrantes\"){\r\n      var ArrCotizaciones = enviardataGrid.map((item, index) => {\r\n        return {\r\n          id: index,\r\n          CODIGO_OFICINA: item.CODIGO_OFICINA,\r\n          OFICINA: item.OFICINA,\r\n          FECHA_INGRESO: item.FECHA_INGRESO,\r\n           MONEDA: item.MONEDA,\r\n          NRO_INGRESO: item.NRO_INGRESO,\r\n          TIPO_DOCUMENTO: item.TIPO_DOCUMENTO,\r\n          MTO_LOCAL: item.MTO_LOCAL,\r\n          MTO_MONEDA: item.MTO_MONEDA,\r\n          NRO_ACRE_FALTANTE: item.NRO_ACRE_FALTANTE,\r\n          MTO_FALTANTE: item.MTO_FALTANTE,\r\n          NRO_OBLIG_SOBRANTE: item.NRO_OBLIG_SOBRANTE,\r\n          MTO_SOBRANTE: item.MTO_SOBRANTE,\r\n          CLIENTE: item.CLIENTE,\r\n        };\r\n      });\r\n  // alert(JSON.stringify(ArrCotizaciones))\r\n      setRows(ArrCotizaciones);\r\n\r\n      columns = [\r\n        {\r\n          field: \"CODIGO_OFICINA\",\r\n          headerName: \"Código Oficina\",\r\n          width: 100,\r\n        },\r\n        {\r\n          field: \"OFICINA\",\r\n          headerName: \"Oficina\",\r\n          width: 100,\r\n         \r\n        },\r\n        {\r\n          field: \"FECHA_INGRESO\",\r\n          headerName: \"Fecha Ingreso\",\r\n          width: 100,\r\n       \r\n        },\r\n        {\r\n          field: \"MONEDA\",\r\n          headerName: \"Moneda\",\r\n          width: 100,\r\n          type: \"number\",\r\n        },\r\n        {\r\n          field: \"NRO_INGRESO\",\r\n          headerName: \"Nro Ingreso\",\r\n          width: 100,\r\n          type: \"string\",\r\n        },\r\n        {\r\n          field: \"TIPO_DOCUMENTO\",\r\n          headerName: \"Tipo Documento\",\r\n          width: 100,\r\n          type: \"number\",\r\n        },\r\n        {\r\n          field: \"MTO_LOCAL\",\r\n          headerName: \"Monto Local\",\r\n          width: 100,\r\n          type: \"number\",\r\n        }\r\n        ,\r\n        {\r\n          field: \"MTO_MONEDA\",\r\n          headerName: \"Monto Moneda $\",\r\n          width: 100,\r\n          type: \"number\",\r\n        },\r\n        {\r\n          field: \"NRO_ACRE_FALTANTE\",\r\n          headerName: \"Nro Acre. Faltante\",\r\n          width: 100,\r\n          type: \"string\",\r\n        },\r\n        {\r\n          field: \"MTO_FALTANTE\",\r\n          headerName: \"Monto Faltante $\",\r\n          width: 100,\r\n          type: \"number\",\r\n        },\r\n        {\r\n          field: \"NRO_OBLIG_SOBRANTE\",\r\n          headerName: \"Nro Oblig Sobrante $\",\r\n          width: 100,\r\n          type: \"string\",   \r\n        },\r\n        {\r\n          field: \"MTO_SOBRANTE\",\r\n          headerName: \"Monto Sobrante $\",\r\n          width: 100,\r\n          type: \"number\",\r\n        },\r\n        {\r\n          field: \"CLIENTE\",\r\n          headerName: \"Cliente\",\r\n          width: 100,\r\n\r\n        }\r\n      ]\r\n\r\n\r\n    }else if(valor == \"Recaudo de Divisas en Efectivo\"){\r\n      \r\n            var ArrCotizaciones = enviardataGrid.map((item, index) => {\r\n              return {\r\n                id: index,\r\n                OFICINA: item.OFICINA,\r\n                MTO_MONEDA: item.MTO_MONEDA,\r\n              };\r\n            });\r\n        \r\n            setRows(ArrCotizaciones);\r\n      columns = [\r\n        {\r\n          field: \"OFICINA\",\r\n          headerName: \"Oficina\",\r\n          width: 150,\r\n        },\r\n        {\r\n          field: \"MTO_MONEDA\",\r\n          headerName: \"Monto Divisa $\",\r\n          width: 170,\r\n          type: \"number\",\r\n        }\r\n      ]\r\n    }else if(valor == \"Recaudación Divisas - Efectivo - Faltantes\"){\r\n      \r\n      var ArrCotizaciones = enviardataGrid.map((item, index) => {\r\n        return {\r\n          id: index,\r\n          OFICINA: item.OFICINA,\r\n          MTO_FALTANTE: item.MTO_FALTANTE,\r\n        };\r\n      });\r\n  \r\n      setRows(ArrCotizaciones);\r\n      columns = [\r\n\r\n        {\r\n          field: \"OFICINA\",\r\n          headerName: \"Oficina\",\r\n          width: 150,\r\n        },\r\n        {\r\n          field: \"MTO_FALTANTE\",\r\n          headerName: \"Monto Faltante $\",\r\n          width: 170,\r\n          type: \"number\",\r\n        }\r\n      ]\r\n    }else if(valor == \"Recaudación Divisas-Efectivo-Sobrantes\"){\r\n          \r\n      var ArrCotizaciones = enviardataGrid.map((item, index) => {\r\n        return {\r\n          id: index,\r\n          // CODOFICINA: item.CODOFICINA,\r\n          OFICINA: item.OFICINA,\r\n          MTO_SOBRANTE: item.MTO_SOBRANTE\r\n        }\r\n      })\r\n\r\n      setRows(ArrCotizaciones);\r\n      columns = [\r\n\r\n        {\r\n          field: \"OFICINA\",\r\n          headerName: \"Oficina\",\r\n          width: 150,\r\n        },\r\n        {\r\n          field: \"MTO_SOBRANTE\",\r\n          headerName: \"Monto Sobrante $\",\r\n          width: 170,\r\n          type: \"number\",\r\n        }\r\n      ]\r\n    }else if(valor == \"Efectivo / Sobrantes / Faltantes\"){\r\n\r\n      var ArrCotizaciones = enviardataGrid.map((item, index) => {\r\n        return {\r\n          id: item.CODIGO_OFICINA,\r\n          OFICINA: item.OFICINA,\r\n          MTO_MONEDA: item.MTO_MONEDA,\r\n          MTO_FALTANTE: item.MTO_FALTANTE,\r\n          MTO_SOBRANTE: item.MTO_SOBRANTE,\r\n        };\r\n      });\r\n\r\n      setRows(ArrCotizaciones);\r\n      columns = [\r\n        {\r\n          field: \"OFICINA\",\r\n          headerName: \"Oficina\",\r\n          width: 150,\r\n        },\r\n        {\r\n          field: \"MTO_MONEDA\",\r\n          headerName: \"Monto Moneda\",\r\n          width: 170,\r\n          type: \"number\",\r\n        },\r\n        {\r\n          field: \"MTO_FALTANTE\",\r\n          headerName: \"Monto Faltante\",\r\n          width: 170,\r\n          type: \"number\",\r\n        },\r\n        {\r\n          field: \"MTO_SOBRANTE\",\r\n          headerName: \"Monto Sobrante\",\r\n          width: 170,\r\n          type: \"number\",\r\n        }\r\n      ]\r\n}\r\n  }, []);\r\n\r\n  function CustomPagination(props) {\r\n    const { state, api } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <Pagination\r\n        className={classes.root}\r\n        color=\"primary\"\r\n        page={state.pagination.page}\r\n        count={state.pagination.pageCount}\r\n        onChange={(event, value) => api.current.setPage(value)}\r\n      />\r\n    );\r\n  }\r\n\r\n  CustomPagination.propTypes = {\r\n    /**\r\n     * ApiRef that let you manipulate the grid.\r\n     */\r\n    api: PropTypes.shape({\r\n      current: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    /**\r\n     * The GridState object containing the current grid state.\r\n     */\r\n    state: PropTypes.object.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: 800, width: \"100%\" }}>\r\n      <XGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pagination={true}\r\n        pageSize={19}\r\n        rowsPerPageOptions={[19, 20, 30]}\r\n        showToolbar\r\n        density=\"compact\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\tablas\\GridCotOcea.js",[],"C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\Grafico.js",["228","229"],"import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nconst pieOptions = {\r\n  title: \"\",\r\n  pieHole: 0.6,\r\n  slices: [\r\n    {\r\n      color: \"#2BB673\"\r\n    },\r\n    {\r\n      color: \"#d91e48\"\r\n    },\r\n    {\r\n      color: \"#007fad\"\r\n    },\r\n    {\r\n      color: \"#e9a227\"\r\n    }\r\n  ],\r\n  // legend: {\r\n  //   position: \"bottom\",\r\n  //   alignment: \"center\",\r\n  //   textStyle: {\r\n  //     color: \"233238\",\r\n  //     fontSize: 14\r\n  //   }\r\n  // },\r\n  tooltip: {\r\n    showColorCode: true\r\n  },\r\n  chartArea: {\r\n    left: 0,\r\n    top: 30,\r\n    width: \"80%\",\r\n    height: \"80%\"\r\n  },\r\n  fontName: \"Roboto\"\r\n};\r\n\r\nexport default function GraficaPrueba({ enviardataGraph, valor }) {\r\n\r\n  const [json, setJson] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (valor !== \"Efectivo / Sobrantes / Faltantes\") {\r\n      const chartData = [['Area', 'Nro_Polizas']]\r\n      for (let i = 0; i < enviardataGraph.length; i += 1) {\r\n        chartData.push([enviardataGraph[i].AREA.substring(14), enviardataGraph[i].COTIZACIONES])\r\n      }\r\n      setJson(chartData);\r\n    } else if (valor === \"Efectivo / Sobrantes / Faltantes\") {\r\n      const chartData = [['MTO_MONEDA', 'MTO_FALTANTE','MTO_SOBRANTE']]\r\n      for (let i = 0; i < enviardataGraph.length; i += 1) {\r\n        chartData.push([enviardataGraph[i].MTO_MONEDA, enviardataGraph[i].MTO_FALTANTE, enviardataGraph[i].MTO_SOBRANTE])\r\n      }\r\n      setJson(chartData);\r\n    }\r\n\r\n    const nums = enviardataGraph.map((cot) => cot.COTIZACIONES);\r\n    let total = nums.reduce((a, b) => a + b, 0);\r\n    setTotal(total)\r\n  }, [enviardataGraph])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {valor === \"realizadas\" ? (\r\n        <>\r\n          <b>Cotizaciones Realizadas:</b> {total}\r\n        </>\r\n      ) : valor === \"emitidas\" ? (\r\n        <>\r\n          <b>Cotizaciones Emitidas:</b> {total}\r\n        </>\r\n      ): valor === \"productos\" ? (\r\n        <>\r\n          <b>Cotizaciones por Productos:</b> {total}\r\n        </>\r\n      ): valor === \"emitXprod\" ? (\r\n        <>\r\n          <b>Cotizaciones Emitidas por Productos:</b> {total}\r\n        </>\r\n      ) \r\n      : (\r\n            <>\r\n              {\" \"}\r\n              <b>Total:</b> {total}\r\n            </>\r\n          )\r\n      }\r\n      <Chart\r\n        width={'370px'}\r\n        height={'250px'}\r\n        chartType=\"PieChart\"\r\n        data={json}\r\n        options={pieOptions}\r\n       // graph_id=\"PieChart\"\r\n        options={{\r\n          chartArea: { left: 20, top: 10, width: '90%', height: '75%' },\r\n          legend: { position: 'bottom', textStyle: { color: 'black', fontSize: 11 } },\r\n         // title: 'Cotizaciones por Productos',\r\n          slices: [{ offset: 0.1 }],\r\n          titleTextStyle: { fontSize: 16, color: 'gray' },\r\n          is3D: true,\r\n        }}\r\n      />\r\n\r\n    </div>\r\n  );\r\n\r\n}","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\GraficaCotiVsEm.js",["230","231"],"import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nvar encabezado1 = '';\r\nvar encabezado2 = '';\r\nvar valor1\r\nvar valor2\r\nvar a = [[encabezado1, encabezado2], [encabezado1, valor1], [encabezado2, valor2]]\r\n\r\nconst pieOptions = {\r\n  title: \"\",\r\n  pieHole: 0.6,\r\n  slices: [\r\n    {\r\n      color: \"#2BB673\"\r\n    },\r\n    {\r\n      color: \"#d91e48\"\r\n    },\r\n    {\r\n      color: \"#007fad\"\r\n    },\r\n    {\r\n      color: \"#e9a227\"\r\n    }\r\n  ],\r\n  legend: {\r\n    position:  \"bottom\",\r\n    alignment: \"center\",\r\n    textStyle: {\r\n      color: \"233238\",\r\n      fontSize: 14\r\n    }\r\n  },\r\n  tooltip: {\r\n    showColorCode: true\r\n  },\r\n  chartArea: {\r\n    left: 0,\r\n    top: 30,\r\n    width: \"80%\",\r\n    height: \"80%\"\r\n  },\r\n  fontName: \"Roboto\"\r\n};\r\nexport default function GraficaPrueba({ enviardataGraph }) {\r\n\r\n  const [json, setJson] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    setJson(enviardataGraph)\r\n    encabezado1 = \"COTIZACIONES_EMITIDAS\";\r\n    encabezado2 = \"COTIZACIONES_NO_EMITIDAS\";\r\n    valor1 = enviardataGraph[0].COTIZACIONES_EMITIDAS;\r\n    valor2 = enviardataGraph[0].COTIZACIONES_NO_EMITIDAS;\r\n    a = [[encabezado1, encabezado2], [encabezado1, valor1], [encabezado2, valor2]]\r\n\r\n  }, [enviardataGraph])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Chart\r\n        width={'390px'}\r\n        height={'250px'}\r\n        chartType=\"PieChart\"\r\n        data={a}\r\n        options={pieOptions}\r\n        graph_id=\"PieChart\"\r\n        options={{\r\n          chartArea:{left:20,top:40,width:'90%',height:'75%'},\r\n          legend: { position: 'bottom',textStyle: {color: 'black', fontSize: 9} },\r\n          title: 'Cotizaciones Emitidas vs No Emitidas',\r\n          slices: [{offset : 0.1}],\r\n          titleTextStyle:{ fontSize: 16, color:'gray'},\r\n          is3D: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\Graficoproductos.js",["232","233","234","235","236"],"import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nvar encabezados1 = '';\r\nvar encabezaValor = '';\r\n var dataGraf = [encabezados1,encabezaValor]\r\n\r\nconst pieOptions = {\r\n  title: \"\",\r\n  pieHole: 0.6,\r\n  slices: [\r\n    {\r\n      color: \"#2BB673\"\r\n    },\r\n    {\r\n      color: \"#d91e48\"\r\n    },\r\n    {\r\n      color: \"#007fad\"\r\n    },\r\n    {\r\n      color: \"#e9a227\"\r\n    }\r\n  ],\r\n  legend: {\r\n    position:  \"bottom\",\r\n    alignment: \"center\",\r\n    textStyle: {\r\n      color: \"233238\",\r\n      fontSize: 14\r\n    }\r\n  },\r\n  tooltip: {\r\n    showColorCode: true\r\n  },\r\n  chartArea: {\r\n    left: 0,\r\n    top: 30,\r\n    width: \"80%\",\r\n    height: \"80%\"\r\n  },\r\n  fontName: \"Roboto\"\r\n};\r\nexport default function GraficaPrueba({ enviardataGraph }) {\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    //Arreglo de encabezados\r\n    var encabezados1= enviardataGraph.map((cot) => {\r\n      return cot.AREA.substring(14)\r\n    });\r\n    // encabezados1=encabezados;\r\n    // dataGraf.push(encabezados)\r\n\r\n    enviardataGraph.map((cot) => {\r\n       var valores = [cot.AREA.substring(14),cot.COTIZACIONES]\r\n       dataGraf.push(valores)\r\n    });\r\n\r\n\r\n    console.log(dataGraf);\r\n    // setData(a)\r\n    // encabezado1 = \"COTIZACIONES_EMITIDAS\";\r\n    // encabezado2 = \"COTIZACIONES_NO_EMITIDAS\";\r\n    // valor1 = enviardataGraph[0].COTIZACIONES_EMITIDAS;\r\n    // valor2 = enviardataGraph[0].COTIZACIONES_NO_EMITIDAS;\r\n    // a = [[encabezado1, encabezado2], [encabezado1, valor1], [encabezado2, valor2]]\r\n\r\n  }, [enviardataGraph])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Chart\r\n        width={'390px'}\r\n        height={'250px'}\r\n        chartType=\"PieChart\"\r\n        // data={a}\r\n        options={pieOptions}\r\n        graph_id=\"PieChart\"\r\n        options={{\r\n          chartArea:{left:20,top:40,width:'80%',height:'75%'},\r\n          legend: { position: 'bottom',textStyle: {color: 'black', fontSize: 9} },\r\n          title: 'Cotizaciones Emitidas vs No Emitidas',\r\n          slices: [{offset : 0.1}],\r\n          titleTextStyle:{ fontSize: 16, color:'gray'},\r\n          is3D: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\GrafMtoFaltSobr.js",[],"C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\GraficoBar.js",["237"],"import Chart from \"react-google-charts\";\r\nimport React, { useEffect, useState } from \"react\";\r\n// import \"../../css/Tabs.css\";\r\n\r\nfunction App({ enviardataGraph, valor, enviardataGrid }) {\r\n  const [json, setJson] = useState([]);\r\n  const [title, setTitle] = useState(valor);\r\n  useEffect(() => {\r\n\r\n    if (valor === \"Recaudo de Divisas en Efectivo\") {\r\n      const chartData = [['OFICINA', 'MTO_MONEDA', { role: 'style', format: 'currency' }, { sourceColumn: 2, role: 'annotation', type: 'number', calc: 'stringify' }]]\r\n      for (let i = 0; i < enviardataGraph.length; i += 1) {\r\n        chartData.push([enviardataGraph[i].OFICINA, enviardataGraph[i].MTO_MONEDA, 'fill-color:#ff9100;stroke-color: #e65100;stroke-width: 2 , font-size:20px', enviardataGraph[i].MTO_MONEDA])\r\n      }\r\n      setJson(chartData);\r\n      setTitle(valor)\r\n    } else if (valor === \"Recaudación Divisas-Efectivo-Sobrantes\") {\r\n      const chartData = [['OFICINA', 'MTO_SOBRANTE', { role: 'style' }, { sourceColumn: 2, role: 'annotation', type: 'number', calc: 'stringify', }]]\r\n      for (let i = 0; i < enviardataGraph.length; i += 1) {\r\n        chartData.push([enviardataGraph[i].OFICINA, enviardataGraph[i].MTO_SOBRANTE, 'fill-color:#ff9100;stroke-color: #e65100;stroke-width: 2 ', enviardataGraph[i].MTO_SOBRANTE])\r\n      }\r\n      setJson(chartData);\r\n      setTitle(valor)\r\n    }\r\n    else if (valor === \"Recaudación Divisas - Efectivo - Faltantes\") {\r\n      const chartData = [['OFICINA', 'MTO_FALTANTE', { role: 'style' }, { sourceColumn: 2, role: 'annotation', type: 'number', calc: 'stringify', }]]\r\n      for (let i = 0; i < enviardataGraph.length; i += 1) {\r\n        chartData.push([enviardataGraph[i].OFICINA, enviardataGraph[i].MTO_FALTANTE, 'fill-color:#ff9100;stroke-color: #e65100;stroke-width: 2 ', enviardataGraph[i].MTO_FALTANTE])\r\n      }\r\n      setJson(chartData);\r\n      setTitle(valor)\r\n    }\r\n    else if (valor === \"Efectivo / Sobrantes / Faltantes\") {\r\n      const chartData = [\r\n        ['OFICINA', 'MTO_MONEDA', 'MTO_SOBRANTE', 'MTO_FALTANTE',\r\n          // { role: 'style' }, \r\n          // { role: 'style' }, \r\n          // { role: 'style' }, \r\n          // {sourceColumn: 2, role: 'annotation', type: 'number', calc: 'stringify',},\r\n          // {sourceColumn: 2, role: 'annotation', type: 'number', calc: 'stringify',},\r\n          // {sourceColumn: 2, role: 'annotation', type: 'number', calc: 'stringify',},\r\n        ]\r\n      ]\r\n      // alert(JSON.stringify(enviardataGraph))\r\n      for (let i = 0; i < enviardataGrid.length; i += 1) {\r\n        chartData.push([\r\n          enviardataGrid[i].OFICINA,\r\n          enviardataGrid[i].MTO_MONEDA,\r\n          enviardataGrid[i].MTO_SOBRANTE,\r\n          enviardataGrid[i].MTO_FALTANTE,\r\n          // ,'fill-color:#ff9100;stroke-color: #e65100;stroke-width: 2 ',\r\n          // ,'fill-color:#ff9100;stroke-color: #e65100;stroke-width: 2 ',\r\n          // ,'fill-color:#ff9100;stroke-color: #e65100;stroke-width: 2 ',\r\n          // enviardataGrid[i].MTO_MONEDA,\r\n          // enviardataGrid[i].MTO_SOBRANTE, \r\n          // enviardataGrid[i].MTO_FALTANTE\r\n        ])\r\n      }\r\n      setJson(chartData);\r\n      setTitle(valor)\r\n    }\r\n\r\n  }, [enviardataGraph,valor])\r\n \r\n  return (\r\n    <div style={{ marginTop: -8 }}>\r\n      {/* {valor === \"Recaudo de Divisas en Efectivo\" ? (\r\n        <>\r\n          <b>{valor}</b> \r\n        </>\r\n      ) : valor === \"Recaudación Divisas-Efectivo-Sobrantes\" ? (\r\n        <>\r\n          <b>{valor}</b> \r\n        </>\r\n      ): valor === \"Recaudación Divisas - Efectivo - Faltantes\" ? (\r\n        <>\r\n          <b>{valor}</b>\r\n        </>\r\n      ): valor === \"Efectivo / Sobrantes / Faltantes\" ? (\r\n        <>\r\n          <b>{valor}</b>\r\n        </>\r\n      ): (\r\n            <>\r\n              <b></b> \r\n            </>\r\n          )\r\n      }  */}\r\n      {valor === \"Efectivo / Sobrantes / Faltantes\" ? (\r\n        <>\r\n          <div style={{ marginLeft: '0px' }}>\r\n            {/* <Chart\r\n            width={'500px'}\r\n            height={'300px'}\r\n            chartType=\"Bar\"\r\n            loader={<div>Cargando Gráfica...</div>}\r\n            data={json}\r\n              // [\r\n              //   ['', 'Mto. Moneda', 'Faltante', 'Sobrante'],\r\n              //   ['', 1000, 400, 200]\r\n              // ]\r\n              options={{\r\n                // Material design options\r\n                chart: {\r\n                  title: 'Efectivo / Sobrantes / Faltantes',\r\n                  // subtitle: 'Sales, Expenses, and Profit: 2014-2017',\r\n                },\r\n                hAxis: {\r\n                  title: 'MONTO DIVISAS',\r\n                  titleTextStyle: { color: '#dd2c00', fontSize: 16, fontStyle: 'normal', italic: \"false\" },\r\n                  textStyle: {\r\n                    fontSize: 10\r\n                  },\r\n                  minValue: 0,\r\n                },\r\n                vAxis: {\r\n                  // title: 'OFICINAS',\r\n                  format: 'currency',\r\n                  textStyle: {\r\n                    fontSize: 10\r\n                  },\r\n                  titleTextStyle: { color: '#dd2c00', fontSize: 16, italic: \"false\" },\r\n\r\n                }\r\n              }}\r\n            />  */}\r\n            <Chart\r\n              width={'100%'}\r\n              chartLanguage=\"es\"\r\n              height={'800px'}\r\n              chartType=\"BarChart\"\r\n              loader={<div>Cargando Gráfica...</div>}\r\n              data={json}\r\n              options={{\r\n                legend: { position: \"none\" },\r\n                title: 'Efectivo / Sobrantes / Faltantes',\r\n                chartArea: { width: '70%',height: \"80%\" , //65%\r\n                backgroundColor: '#eceff1'  },\r\n                hAxis: {\r\n                  title: 'Monto $',\r\n                  minValue: 0,\r\n                  textStyle: {\r\n                    fontSize: 9\r\n                  },\r\n                },\r\n                vAxis: {\r\n                  title: 'Sucursal',\r\n                  textStyle: {\r\n                    fontSize: 9\r\n                  },\r\n                },\r\n              }}\r\n              // For tests\r\n              rootProps={{ 'data-testid': '1' }}\r\n            />\r\n          </div>\r\n\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Chart\r\n            width={'100%'}//50%\r\n            //height={'800px'}//800px\r\n            chartLanguage=\"es\"\r\n            chartType=\"BarChart\"\r\n            loader={<div>Cargando Gráfica...</div>}\r\n            data={json}\r\n\r\n            options={{\r\n              width: \"100%\",//750\r\n              height: 800,//800\r\n              title: {title},\r\n              titleTextStyle: { color: '#455a64', fontSize: 18, float: 'right' },\r\n              is3D: 'true',\r\n              chartArea: { \r\n                width: '70%', //65%\r\n                height:\"80%\",\r\n                backgroundColor: '#eceff1' \r\n              },\r\n              legend: { position: \"none\" },\r\n              hAxis: {\r\n                title: 'MONTO DIVISAS',\r\n                titleTextStyle: { color: '#dd2c00', fontSize: 16, fontStyle: 'normal', italic: \"false\" },\r\n                textStyle: {\r\n                  fontSize: 10\r\n                },\r\n                minValue: 0,\r\n              },\r\n              vAxis: {\r\n                title: 'OFICINAS',\r\n                format: 'currency',\r\n                textStyle: {\r\n                  fontSize: 10\r\n                },\r\n                titleTextStyle: { color: '#dd2c00', fontSize: 16, italic: \"false\" },\r\n                gridlines: { count: 12 }\r\n              },\r\n            }}\r\n            // For tests\r\n            rootProps={{ 'data-testid': '1' }}\r\n          />\r\n        </>\r\n\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\graficos\\Graficoprodperfil.js",["238"],"// import React, { useState, useEffect } from \"react\";\r\n// import { Pie } from \"@reactchartjs/react-chart.js\";\r\n\r\n// const PieChart = ({ enviardataGraph }) => {\r\n//   const [rows, setRows] = useState([]);\r\n//   const [areas, setAreas] = useState([]);\r\n//   const [total, setTotal] = useState(0);\r\n\r\n//   const data = {\r\n//     labels: areas,\r\n\r\n//     datasets: [\r\n//       {\r\n//         // label: 'Cotizaciones Productos',\r\n//         data: rows,\r\n//         options: {\r\n//           legend: {\r\n//             display: true,\r\n//             labels: {\r\n//               fontColor: \"red\",\r\n//               fontSize: \"20px\",\r\n//             },\r\n//           },\r\n//         },\r\n\r\n//         backgroundColor: [\"#2980B9\", \"#2E8B57\", \"#F9D120\", \"red\", \"#8FBC8F\"],\r\n//         borderColor: [\"#2980B9\", \"#2E8B57\", \"#F9D120\", \"red\", \"#8FBC8F\"],\r\n//         borderWidth: 1,\r\n//       },\r\n//     ],\r\n//     options: {\r\n//       title: {\r\n//         display: true,\r\n//         text: \"Título del gráfico\",\r\n//       },\r\n//     },\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // console.log('desde el graph values:  ' + JSON.stringify(enviardataGraph));\r\n//     const nums = enviardataGraph.map((cot) => cot.COTIZACIONES);\r\n//     const Arrperfiles = enviardataGraph.map((cot) => cot.PERFIL);\r\n//     console.log(\"Perfiles \" + Arrperfiles);\r\n//     setRows(nums);\r\n//     setAreas(Arrperfiles);\r\n//     let total = nums.reduce((a, b) => a + b, 0);\r\n//     setTotal(total);\r\n//   }, [enviardataGraph]);\r\n\r\n//   return (\r\n//     <div className=\"chartPie\">\r\n//       <b>Total:</b> {total}\r\n//       <Pie data={data} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PieChart;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nconst pieOptions = {\r\n  title: \"\",\r\n  pieHole: 0.6,\r\n  slices: [\r\n    {\r\n      color: \"#2BB673\"\r\n    },\r\n    {\r\n      color: \"#d91e48\"\r\n    },\r\n    {\r\n      color: \"#007fad\"\r\n    },\r\n    {\r\n      color: \"#e9a227\"\r\n    }\r\n  ],\r\n  legend: {\r\n    position: \"bottom\",\r\n    alignment: \"center\",\r\n    textStyle: {\r\n      color: \"233238\",\r\n      fontSize: 14\r\n    }\r\n  },\r\n  tooltip: {\r\n    showColorCode: true\r\n  },\r\n  chartArea: {\r\n    left: 0,\r\n    top: 30,\r\n    width: \"80%\",\r\n    height: \"80%\"\r\n  },\r\n  fontName: \"Roboto\"\r\n};\r\n\r\nexport default function GraficaPrueba({ enviardataGraph, valor }) {\r\n\r\n  const [json, setJson] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n\r\n  useEffect(() => {\r\n\r\n    const chartData = [['Area', 'Nro_Polizas']]\r\n    for (let i = 0; i < enviardataGraph.length; i += 1) {\r\n      chartData.push([enviardataGraph[i].PERFIL, enviardataGraph[i].COTIZACIONES])\r\n    }\r\n    setJson(chartData);\r\n\r\n    const nums = enviardataGraph.map((cot) => cot.COTIZACIONES);\r\n    let total = nums.reduce((a, b) => a + b, 0);\r\n    setTotal(total)\r\n  }, [enviardataGraph])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {valor === \"prodPerfil\" ? (\r\n        <>\r\n          <b>Cotizaciones por Perfil:</b> {total}\r\n        </>\r\n      ) : valor === \"emitidas\" ? (\r\n        <>\r\n          <b>Cotizaciones Emitidas:</b> {total}\r\n        </>\r\n      ): valor === \"productos\" ? (\r\n        <>\r\n          <b>Cotizaciones por Productos:</b> {total}\r\n        </>\r\n      ): valor === \"emitXperfil\" ? (\r\n        <>\r\n          <b>Cotizaciones Emitidas por Perfil:</b> {total}\r\n        </>\r\n      ) \r\n      : (\r\n            <>\r\n              {\" \"}\r\n              <b>Total:</b> {total}\r\n            </>\r\n          )\r\n      }\r\n      <Chart\r\n        width={'390px'}\r\n        height={'250px'}\r\n        chartType=\"PieChart\"\r\n        data={json}\r\n        options={pieOptions}\r\n       // graph_id=\"PieChart\"\r\n        options={{\r\n          chartArea: { left: 20, top: 10, width: '90%', height: '75%' },\r\n          legend: { position: 'bottom', textStyle: { color: 'black', fontSize: 11 } },\r\n         // title: 'Cotizaciones por Productos',\r\n          slices: [{ offset: 0.1 }],\r\n          titleTextStyle: { fontSize: 16, color: 'gray' },\r\n          is3D: true,\r\n        }}\r\n      />\r\n\r\n    </div>\r\n  );\r\n\r\n}\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Alerta.js",["239"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function AlertDialogSlide({ open, setOpen, handleClose, msn }) {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                {/* <DialogTitle id=\"alert-dialog-slide-title\">{msn}</DialogTitle> */}\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        {msn}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} id=\"btn_alert\" style={{color:\"red !important\"}}>\r\n                        Cerrar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\components\\Tabs3.js",[],"C:\\Users\\Desarrollo\\Desktop\\PROYECTOS\\dashboradPiramide\\src\\hooks\\useListCurrencies.js",["240"],"import React,{useEffect, useState} from 'react'\r\nimport axios from 'axios';\r\n\r\nexport const useListCurrencies = () => {\r\n//    const REACT_API_URL_DESA = \"http://10.128.49.125:5000/recaudosApi\";\r\n    const REACT_API_URL_DESA = \"https://emergencia24horas.segurospiramide.com/node/express/servicios/api\";\r\n\r\n\r\n    const [listCurrencies, setListCurrencies] = useState([])\r\n    const [moneda, setMoneda] = useState('DL')\r\n\r\n    //get list currencies\r\n    useEffect(() => {\r\n        //********************************************* */\r\n        const source = axios.CancelToken.source();\r\n        let isMounted = true;\r\n        //********************************************* */\r\n        try {\r\n\r\n            const getListCurrencies = async () => {\r\n\r\n                const resListCurrencies = await axios.post(\r\n                    `${REACT_API_URL_DESA}/ListaMonedas`,\r\n                    // { ...value, \"cCodMoneda\": \"DL\" }, \r\n                    { cancelToken: source.token }\r\n                )\r\n\r\n                if (isMounted) setListCurrencies(resListCurrencies.data)\r\n\r\n            }\r\n            getListCurrencies()\r\n\r\n        } catch (error) {\r\n            if (!isMounted) return; // comp already unmounted, nothing to do\r\n            if (axios.isCancel(error)) console.log(error);\r\n            else console.log(error);\r\n        }\r\n        //cancelando subscripciones\r\n        return () => {\r\n            isMounted = false;\r\n            source.cancel();\r\n        };\r\n    }, [])\r\n\r\n    const handleChangeMoneda = (e) => {\r\n        setMoneda(e.target.value)\r\n        // setListCurrencies(resListCurrencies)\r\n    }\r\n\r\n    return {\r\n        listCurrencies,\r\n        moneda,\r\n        setMoneda,\r\n        handleChangeMoneda\r\n    }\r\n}\r\n",{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":7,"column":8,"nodeType":"247","messageId":"248","endLine":7,"endColumn":13},{"ruleId":"245","severity":1,"message":"249","line":16,"column":35,"nodeType":"247","messageId":"248","endLine":16,"endColumn":40},{"ruleId":"245","severity":1,"message":"250","line":22,"column":10,"nodeType":"247","messageId":"248","endLine":22,"endColumn":28},{"ruleId":"245","severity":1,"message":"251","line":56,"column":9,"nodeType":"247","messageId":"248","endLine":56,"endColumn":22},{"ruleId":"245","severity":1,"message":"252","line":6,"column":8,"nodeType":"247","messageId":"248","endLine":6,"endColumn":18},{"ruleId":"245","severity":1,"message":"253","line":7,"column":8,"nodeType":"247","messageId":"248","endLine":7,"endColumn":21},{"ruleId":"245","severity":1,"message":"254","line":8,"column":8,"nodeType":"247","messageId":"248","endLine":8,"endColumn":16},{"ruleId":"245","severity":1,"message":"255","line":9,"column":8,"nodeType":"247","messageId":"248","endLine":9,"endColumn":12},{"ruleId":"245","severity":1,"message":"256","line":11,"column":8,"nodeType":"247","messageId":"248","endLine":11,"endColumn":13},{"ruleId":"245","severity":1,"message":"257","line":32,"column":10,"nodeType":"247","messageId":"248","endLine":32,"endColumn":14},{"ruleId":"245","severity":1,"message":"258","line":34,"column":9,"nodeType":"247","messageId":"248","endLine":34,"endColumn":13},{"ruleId":"245","severity":1,"message":"259","line":36,"column":9,"nodeType":"247","messageId":"248","endLine":36,"endColumn":19},{"ruleId":"245","severity":1,"message":"260","line":39,"column":9,"nodeType":"247","messageId":"248","endLine":39,"endColumn":21},{"ruleId":"261","severity":1,"message":"262","line":52,"column":11,"nodeType":"263","endLine":52,"endColumn":50},{"ruleId":"245","severity":1,"message":"264","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":13},{"ruleId":"245","severity":1,"message":"265","line":29,"column":11,"nodeType":"247","messageId":"248","endLine":29,"endColumn":16},{"ruleId":"245","severity":1,"message":"266","line":29,"column":18,"nodeType":"247","messageId":"248","endLine":29,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":63,"column":35,"nodeType":"269","messageId":"270","endLine":63,"endColumn":37},{"ruleId":"261","severity":1,"message":"262","line":104,"column":15,"nodeType":"263","endLine":104,"endColumn":87},{"ruleId":"245","severity":1,"message":"271","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":27},{"ruleId":"245","severity":1,"message":"271","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":27},{"ruleId":"245","severity":1,"message":"272","line":8,"column":17,"nodeType":"247","messageId":"248","endLine":8,"endColumn":25},{"ruleId":"267","severity":1,"message":"268","line":23,"column":32,"nodeType":"269","messageId":"270","endLine":23,"endColumn":34},{"ruleId":"245","severity":1,"message":"273","line":10,"column":8,"nodeType":"247","messageId":"248","endLine":10,"endColumn":25},{"ruleId":"245","severity":1,"message":"274","line":21,"column":8,"nodeType":"247","messageId":"248","endLine":21,"endColumn":24},{"ruleId":"245","severity":1,"message":"275","line":26,"column":8,"nodeType":"247","messageId":"248","endLine":26,"endColumn":23},{"ruleId":"276","severity":1,"message":"277","line":63,"column":3,"nodeType":"278","messageId":"270","endLine":63,"endColumn":8},{"ruleId":"245","severity":1,"message":"279","line":134,"column":10,"nodeType":"247","messageId":"248","endLine":134,"endColumn":24},{"ruleId":"245","severity":1,"message":"280","line":134,"column":33,"nodeType":"247","messageId":"248","endLine":134,"endColumn":51},{"ruleId":"245","severity":1,"message":"281","line":155,"column":13,"nodeType":"247","messageId":"248","endLine":155,"endColumn":21},{"ruleId":"267","severity":1,"message":"268","line":163,"column":20,"nodeType":"269","messageId":"270","endLine":163,"endColumn":22},{"ruleId":"267","severity":1,"message":"268","line":163,"column":48,"nodeType":"269","messageId":"270","endLine":163,"endColumn":50},{"ruleId":"282","severity":1,"message":"283","line":246,"column":9,"nodeType":"284","endLine":246,"endColumn":11,"suggestions":"285"},{"ruleId":"282","severity":1,"message":"283","line":274,"column":8,"nodeType":"284","endLine":274,"endColumn":22,"suggestions":"286"},{"ruleId":"282","severity":1,"message":"287","line":399,"column":8,"nodeType":"284","endLine":399,"endColumn":10,"suggestions":"288"},{"ruleId":"245","severity":1,"message":"281","line":421,"column":13,"nodeType":"247","messageId":"248","endLine":421,"endColumn":21},{"ruleId":"267","severity":1,"message":"268","line":429,"column":20,"nodeType":"269","messageId":"270","endLine":429,"endColumn":22},{"ruleId":"267","severity":1,"message":"268","line":429,"column":48,"nodeType":"269","messageId":"270","endLine":429,"endColumn":50},{"ruleId":"267","severity":1,"message":"268","line":449,"column":22,"nodeType":"269","messageId":"270","endLine":449,"endColumn":24},{"ruleId":"267","severity":1,"message":"268","line":649,"column":25,"nodeType":"269","messageId":"270","endLine":649,"endColumn":27},{"ruleId":"289","severity":1,"message":"290","line":651,"column":56,"nodeType":"291","endLine":651,"endColumn":62},{"ruleId":"289","severity":1,"message":"290","line":656,"column":56,"nodeType":"291","endLine":656,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":665,"column":28,"nodeType":"269","messageId":"270","endLine":665,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":667,"column":56,"nodeType":"291","endLine":667,"endColumn":62},{"ruleId":"289","severity":1,"message":"290","line":672,"column":56,"nodeType":"291","endLine":672,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":690,"column":28,"nodeType":"269","messageId":"270","endLine":690,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":692,"column":56,"nodeType":"291","endLine":692,"endColumn":62},{"ruleId":"289","severity":1,"message":"290","line":697,"column":56,"nodeType":"291","endLine":697,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":710,"column":28,"nodeType":"269","messageId":"270","endLine":710,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":712,"column":56,"nodeType":"291","endLine":712,"endColumn":62},{"ruleId":"289","severity":1,"message":"290","line":717,"column":56,"nodeType":"291","endLine":717,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":728,"column":28,"nodeType":"269","messageId":"270","endLine":728,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":730,"column":56,"nodeType":"291","endLine":730,"endColumn":62},{"ruleId":"289","severity":1,"message":"290","line":735,"column":56,"nodeType":"291","endLine":735,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":744,"column":28,"nodeType":"269","messageId":"270","endLine":744,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":746,"column":56,"nodeType":"291","endLine":746,"endColumn":62},{"ruleId":"289","severity":1,"message":"290","line":751,"column":56,"nodeType":"291","endLine":751,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":760,"column":28,"nodeType":"269","messageId":"270","endLine":760,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":762,"column":56,"nodeType":"291","endLine":762,"endColumn":62},{"ruleId":"289","severity":1,"message":"290","line":768,"column":56,"nodeType":"291","endLine":768,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":777,"column":28,"nodeType":"269","messageId":"270","endLine":777,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":779,"column":56,"nodeType":"291","endLine":779,"endColumn":62},{"ruleId":"289","severity":1,"message":"290","line":785,"column":56,"nodeType":"291","endLine":785,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":794,"column":28,"nodeType":"269","messageId":"270","endLine":794,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":796,"column":56,"nodeType":"291","endLine":796,"endColumn":62},{"ruleId":"289","severity":1,"message":"290","line":802,"column":56,"nodeType":"291","endLine":802,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":812,"column":26,"nodeType":"269","messageId":"270","endLine":812,"endColumn":28},{"ruleId":"289","severity":1,"message":"290","line":814,"column":56,"nodeType":"291","endLine":814,"endColumn":62},{"ruleId":"289","severity":1,"message":"290","line":819,"column":56,"nodeType":"291","endLine":819,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":831,"column":25,"nodeType":"269","messageId":"270","endLine":831,"endColumn":27},{"ruleId":"289","severity":1,"message":"290","line":833,"column":56,"nodeType":"291","endLine":833,"endColumn":63},{"ruleId":"292","severity":1,"message":"293","line":853,"column":1,"nodeType":"294","messageId":"295","endLine":870,"endColumn":2},{"ruleId":"245","severity":1,"message":"296","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"245","severity":1,"message":"297","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"261","severity":1,"message":"262","line":17,"column":11,"nodeType":"263","endLine":17,"endColumn":54},{"ruleId":"245","severity":1,"message":"298","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":14},{"ruleId":"245","severity":1,"message":"298","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":14},{"ruleId":"245","severity":1,"message":"298","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":14},{"ruleId":"245","severity":1,"message":"298","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":14},{"ruleId":"267","severity":1,"message":"268","line":11,"column":14,"nodeType":"269","messageId":"270","endLine":11,"endColumn":16},{"ruleId":"267","severity":1,"message":"268","line":115,"column":20,"nodeType":"269","messageId":"270","endLine":115,"endColumn":22},{"ruleId":"299","severity":1,"message":"300","line":117,"column":17,"nodeType":"247","messageId":"301","endLine":117,"endColumn":32},{"ruleId":"267","severity":1,"message":"268","line":139,"column":20,"nodeType":"269","messageId":"270","endLine":139,"endColumn":22},{"ruleId":"299","severity":1,"message":"300","line":141,"column":11,"nodeType":"247","messageId":"301","endLine":141,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":164,"column":20,"nodeType":"269","messageId":"270","endLine":164,"endColumn":22},{"ruleId":"299","severity":1,"message":"300","line":166,"column":11,"nodeType":"247","messageId":"301","endLine":166,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":190,"column":20,"nodeType":"269","messageId":"270","endLine":190,"endColumn":22},{"ruleId":"299","severity":1,"message":"300","line":192,"column":11,"nodeType":"247","messageId":"301","endLine":192,"endColumn":26},{"ruleId":"282","severity":1,"message":"302","line":229,"column":6,"nodeType":"284","endLine":229,"endColumn":8,"suggestions":"303"},{"ruleId":"282","severity":1,"message":"304","line":64,"column":6,"nodeType":"284","endLine":64,"endColumn":23,"suggestions":"305"},{"ruleId":"289","severity":1,"message":"290","line":99,"column":9,"nodeType":"291","endLine":106,"endColumn":11},{"ruleId":"245","severity":1,"message":"306","line":48,"column":10,"nodeType":"247","messageId":"248","endLine":48,"endColumn":14},{"ruleId":"289","severity":1,"message":"290","line":70,"column":9,"nodeType":"291","endLine":77,"endColumn":11},{"ruleId":"245","severity":1,"message":"307","line":46,"column":10,"nodeType":"247","messageId":"248","endLine":46,"endColumn":14},{"ruleId":"245","severity":1,"message":"308","line":46,"column":16,"nodeType":"247","messageId":"248","endLine":46,"endColumn":23},{"ruleId":"245","severity":1,"message":"309","line":51,"column":9,"nodeType":"247","messageId":"248","endLine":51,"endColumn":21},{"ruleId":"310","severity":1,"message":"311","line":57,"column":31,"nodeType":"312","messageId":"313","endLine":57,"endColumn":33},{"ruleId":"289","severity":1,"message":"290","line":82,"column":9,"nodeType":"291","endLine":89,"endColumn":11},{"ruleId":"282","severity":1,"message":"314","line":63,"column":6,"nodeType":"284","endLine":63,"endColumn":29,"suggestions":"315"},{"ruleId":"289","severity":1,"message":"290","line":151,"column":9,"nodeType":"291","endLine":158,"endColumn":11},{"ruleId":"245","severity":1,"message":"316","line":7,"column":8,"nodeType":"247","messageId":"248","endLine":7,"endColumn":19},{"ruleId":"245","severity":1,"message":"317","line":1,"column":8,"nodeType":"247","messageId":"248","endLine":1,"endColumn":13},"no-native-reassign",["318"],"no-negated-in-lhs",["319"],"no-unused-vars","'Tabs3' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'SignalCellularNull' is defined but never used.","'REACT_API_URL' is assigned a value but never used.","'IconButton' is defined but never used.","'AccountCircle' is defined but never used.","'MenuItem' is defined but never used.","'Menu' is defined but never used.","'Alert' is defined but never used.","'auth' is assigned a value but never used.","'open' is assigned a value but never used.","'handleMenu' is assigned a value but never used.","'handleChange' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Paper' is defined but never used.","'login' is assigned a value but never used.","'userAuth' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useContext' is defined but never used.","'setToken' is assigned a value but never used.","'ArrowDownwardIcon' is defined but never used.","'Graficoproductos' is defined but never used.","'GrafMtoFaltSobr' is defined but never used.","no-dupe-keys","Duplicate key 'paper'.","ObjectExpression","'listCurrencies' is assigned a value but never used.","'handleChangeMoneda' is assigned a value but never used.","'fechaHoy' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'TotalIngresosME', 'oficina', 'titulo', and 'value'. Either include them or remove the dependency array.","ArrayExpression",["320"],["321"],"React Hook useEffect has missing dependencies: 'ResumenIngresosME', 'TotalIngresosME', 'fecha_hasta', 'strfechadesde', 'strfechahasta', 'titulo', 'url', 'urlGraph', 'urlGraph2', and 'value'. Either include them or remove the dependency array.",["322"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'useState' is defined but never used.","'useEffect' is defined but never used.","'moment' is defined but never used.","no-redeclare","'ArrCotizaciones' is already defined.","redeclared","React Hook useEffect has missing dependencies: 'enviardataGrid' and 'valor'. Either include them or remove the dependency array.",["323"],"React Hook useEffect has a missing dependency: 'valor'. Either include it or remove the dependency array.",["324"],"'json' is assigned a value but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'encabezados1' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'enviardataGrid'. Either include it or remove the dependency array.",["325"],"'DialogTitle' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},"Update the dependencies array to be: [TotalIngresosME, oficina, titulo, value]",{"range":"338","text":"339"},"Update the dependencies array to be: [TotalIngresosME, dtosAgencias, oficina, titulo, value]",{"range":"340","text":"341"},"Update the dependencies array to be: [ResumenIngresosME, TotalIngresosME, fecha_hasta, strfechadesde, strfechahasta, titulo, url, urlGraph, urlGraph2, value]",{"range":"342","text":"343"},"Update the dependencies array to be: [enviardataGrid, valor]",{"range":"344","text":"345"},"Update the dependencies array to be: [enviardataGraph, valor]",{"range":"346","text":"347"},"Update the dependencies array to be: [enviardataGraph, enviardataGrid, valor]",{"range":"348","text":"349"},[8556,8558],"[TotalIngresosME, oficina, titulo, value]",[9512,9526],"[TotalIngresosME, dtosAgencias, oficina, titulo, value]",[14006,14008],"[ResumenIngresosME, TotalIngresosME, fecha_hasta, strfechadesde, strfechahasta, titulo, url, urlGraph, urlGraph2, value]",[5954,5956],"[enviardataGrid, valor]",[1636,1653],"[enviardataGraph, valor]",[3190,3213],"[enviardataGraph, enviardataGrid, valor]"]